trigger:
  - develop

pool:
  vmImage: ubuntu-latest

stages:
  - stage: ci
    jobs:
      - job: build
        timeoutInMinutes: 60
        displayName: Build Docker images
        steps:
          - script: |
              export $(grep -v '^#' .env.staging | xargs) &&
              echo "##vso[task.setvariable variable=ApiUrl]$REACT_APP_API"
            displayName: Read .env file into environment
          - task: Docker@2
            displayName: Login to Google Container Registry
            inputs:
              command: login
              containerRegistry: $(dockerRegistry)
          - task: Docker@2
            displayName: Build frontend image
            inputs:
              command: build
              containerRegistry: $(dockerRegistry)
              repository: $(frontendImageUrl)
              Dockerfile: "**/Dockerfile.frontend"
              buildContext: '**'
              arguments: |
                --build-arg REACT_APP_API=$(ApiUrl)
                --build-arg REACT_APP_AUTH0_DOMAIN=$(Auth0Domain)
                --build-arg REACT_APP_AUTH0_CLIENT_ID=$(Auth0Client)
                --build-arg REACT_APP_AUTH0_AUDIENCE=$(Auth0AUdience)
              tags: |
                $(Build.BuildId)
                $(commitHash)
                latest
          - task: Docker@2
            displayName: Push frontend image
            inputs:
              command: push
              containerRegistry: $(dockerRegistry)
              repository: $(frontendImageUrl)
              Dockerfile: "**/Dockerfile.frontend"
              tags: |
                $(Build.BuildId)
                $(commitHash)
                latest

  - stage: cd
    dependsOn: ci
    jobs:
      - job: deploy
        timeoutInMinutes: 360
        variables:
          BUILDSTATE: $[ stageDependencies.ci.build.outputs['printvar.BUILDSTATE'] ]
        steps:
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'gkeAgoricServiceConnection'
              namespace: 'agoric-NFT-staging'
              command: 'login'
          - script: curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && sudo install skaffold /usr/local/bin/
            displayName: Install Skaffold
          - task: DownloadPipelineArtifact@2
            displayName: Download build artifacts
            inputs:
              artifactName: BuildArtifacts
              targetPath: $(System.DefaultWorkingDirectory)
          - script: ./scripts/install-dependencies.sh
            displayName: Install dependencies
          - script: skaffold delete --filename skaffold.dev.yaml --profile development
            continueOnError: true
            displayName: Delete skaffold
          - script: skaffold deploy --filename skaffold.dev.yaml --profile development --build-artifacts "$(BUILDSTATE)" --wait-for-deletions=true --wait-for-deletions-max=2m0s
            displayName: Deploy build artifacts
            env:

          - task: AzureCLI@2
            displayName: Synchronise public assets directory
            inputs:
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az storage blob sync --container public --account-name  --auth-mode login --source assets/public/
            enabled: false
