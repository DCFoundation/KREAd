export function hasOwnPropertyOf(obj: any, prop: any): any;
export function isObject(val: any): boolean;
export const PASS_STYLE: unique symbol;
export function canBeMethod(func: any): boolean;
/**
 * Below we have a series of predicate functions and their (curried) assertion
 * functions. The semantics of the assertion function is just to assert that
 * the corresponding predicate function would have returned true. But it
 * reproduces the internal tests so failures can give a better error message.
 *
 * @type {Checker}
 */
export const assertChecker: Checker;
export function checkNormalProperty(candidate: any, propertyName: string | number | symbol, nameType?: string | undefined, shouldBeEnumerable?: boolean | undefined, check?: Checker | undefined): boolean;
export function getTag(tagRecord: any): any;
export function checkTagRecord(tagRecord: {
    [PASS_STYLE]: string;
}, passStyle: PassStyle, check?: import("../types.js").Checker | undefined): boolean;
export type Checker = import('../types.js').Checker;
export type PassStyle = import('../types.js').PassStyle;
//# sourceMappingURL=passStyle-helpers.d.ts.map