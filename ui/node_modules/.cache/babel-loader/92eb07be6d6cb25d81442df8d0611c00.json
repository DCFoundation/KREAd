{"ast":null,"code":"// @ts-check\n\n/**\n * @typedef {readonly any[]} LogArgs\n *\n * This is an array suitable to be used as arguments of a console\n * level message *after* the format string argument. It is the result of\n * a `details` template string and consists of alternating literal strings\n * and substitution values, starting with a literal string. At least that\n * first literal string is always present.\n */\n\n/**\n * @callback NoteCallback\n *\n * @param {Error} error\n * @param {LogArgs} noteLogArgs\n * @returns {void}\n */\n\n/**\n * @callback GetStackString\n * @param {Error} error\n * @returns {string=}\n */\n\n/**\n * @typedef {Object} LoggedErrorHandler\n *\n * Used to parameterize `makeCausalConsole` to give it access to potentially\n * hidden information to augment the logging of errors.\n *\n * @property {GetStackString} getStackString\n * @property {(error: Error) => string} tagError\n * @property {() => void} resetErrorTagNum for debugging purposes only\n * @property {(error: Error) => (LogArgs | undefined)} getMessageLogArgs\n * @property {(error: Error) => (LogArgs | undefined)} takeMessageLogArgs\n * @property {(error: Error, callback?: NoteCallback) => LogArgs[] } takeNoteLogArgsArray\n */\n// /////////////////////////////////////////////////////////////////////////////\n\n/**\n * @typedef {readonly [string, ...any[]]} LogRecord\n */\n\n/**\n * @typedef {Object} LoggingConsoleKit\n * @property {VirtualConsole} loggingConsole\n * @property {() => readonly LogRecord[]} takeLog\n */\n\n/**\n * @typedef {Object} MakeLoggingConsoleKitOptions\n * @property {boolean=} shouldResetForDebugging\n */\n\n/**\n * @callback MakeLoggingConsoleKit\n *\n * A logging console just accumulates the contents of all whitelisted calls,\n * making them available to callers of `takeLog()`. Calling `takeLog()`\n * consumes these, so later calls to `takeLog()` will only provide a log of\n * calls that have happened since then.\n *\n * @param {LoggedErrorHandler} loggedErrorHandler\n * @param {MakeLoggingConsoleKitOptions=} options\n * @returns {LoggingConsoleKit}\n */\n\n/**\n * @typedef {{ NOTE: 'ERROR_NOTE:', MESSAGE: 'ERROR_MESSAGE:' }} ErrorInfo\n */\n\n/**\n * @typedef {ErrorInfo[keyof ErrorInfo]} ErrorInfoKind\n */\n\n/**\n * @callback MakeCausalConsole\n *\n * Makes a causal console wrapper of a `baseConsole`, where the causal console\n * calls methods of the `loggedErrorHandler` to customize how it handles logged\n * errors.\n *\n * @param {VirtualConsole} baseConsole\n * @param {LoggedErrorHandler} loggedErrorHandler\n * @returns {VirtualConsole}\n */","map":{"version":3,"names":[],"sources":["/Users/carlostrigoseguin/Documents/KRYHA/agoric/character-builder-repo/ui/node_modules/ses/src/error/internal-types.js"],"sourcesContent":["// @ts-check\n\n/**\n * @typedef {readonly any[]} LogArgs\n *\n * This is an array suitable to be used as arguments of a console\n * level message *after* the format string argument. It is the result of\n * a `details` template string and consists of alternating literal strings\n * and substitution values, starting with a literal string. At least that\n * first literal string is always present.\n */\n\n/**\n * @callback NoteCallback\n *\n * @param {Error} error\n * @param {LogArgs} noteLogArgs\n * @returns {void}\n */\n\n/**\n * @callback GetStackString\n * @param {Error} error\n * @returns {string=}\n */\n\n/**\n * @typedef {Object} LoggedErrorHandler\n *\n * Used to parameterize `makeCausalConsole` to give it access to potentially\n * hidden information to augment the logging of errors.\n *\n * @property {GetStackString} getStackString\n * @property {(error: Error) => string} tagError\n * @property {() => void} resetErrorTagNum for debugging purposes only\n * @property {(error: Error) => (LogArgs | undefined)} getMessageLogArgs\n * @property {(error: Error) => (LogArgs | undefined)} takeMessageLogArgs\n * @property {(error: Error, callback?: NoteCallback) => LogArgs[] } takeNoteLogArgsArray\n */\n\n// /////////////////////////////////////////////////////////////////////////////\n\n/**\n * @typedef {readonly [string, ...any[]]} LogRecord\n */\n\n/**\n * @typedef {Object} LoggingConsoleKit\n * @property {VirtualConsole} loggingConsole\n * @property {() => readonly LogRecord[]} takeLog\n */\n\n/**\n * @typedef {Object} MakeLoggingConsoleKitOptions\n * @property {boolean=} shouldResetForDebugging\n */\n\n/**\n * @callback MakeLoggingConsoleKit\n *\n * A logging console just accumulates the contents of all whitelisted calls,\n * making them available to callers of `takeLog()`. Calling `takeLog()`\n * consumes these, so later calls to `takeLog()` will only provide a log of\n * calls that have happened since then.\n *\n * @param {LoggedErrorHandler} loggedErrorHandler\n * @param {MakeLoggingConsoleKitOptions=} options\n * @returns {LoggingConsoleKit}\n */\n\n/**\n * @typedef {{ NOTE: 'ERROR_NOTE:', MESSAGE: 'ERROR_MESSAGE:' }} ErrorInfo\n */\n\n/**\n * @typedef {ErrorInfo[keyof ErrorInfo]} ErrorInfoKind\n */\n\n/**\n * @callback MakeCausalConsole\n *\n * Makes a causal console wrapper of a `baseConsole`, where the causal console\n * calls methods of the `loggedErrorHandler` to customize how it handles logged\n * errors.\n *\n * @param {VirtualConsole} baseConsole\n * @param {LoggedErrorHandler} loggedErrorHandler\n * @returns {VirtualConsole}\n */\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script"}