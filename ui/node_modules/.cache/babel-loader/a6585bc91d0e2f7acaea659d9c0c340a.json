{"ast":null,"code":"import { FERAL_ERROR, TypeError, apply, construct, defineProperties, setPrototypeOf, getOwnPropertyDescriptor } from '../commons.js';\nimport { NativeErrors } from '../whitelist.js';\nimport { tameV8ErrorConstructor } from './tame-v8-error-constructor.js'; // Present on at least FF. Proposed by Error-proposal. Not on SES whitelist\n// so grab it before it is removed.\n\nconst stackDesc = getOwnPropertyDescriptor(FERAL_ERROR.prototype, 'stack');\nconst stackGetter = stackDesc && stackDesc.get; // Use concise methods to obtain named functions without constructors.\n\nconst tamedMethods = {\n  getStackString(error) {\n    if (typeof stackGetter === 'function') {\n      return apply(stackGetter, error, []);\n    } else if ('stack' in error) {\n      // The fallback is to just use the de facto `error.stack` if present\n      return `${error.stack}`;\n    }\n\n    return '';\n  }\n\n};\nexport default function tameErrorConstructor() {\n  let errorTaming = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'safe';\n  let stackFiltering = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'concise';\n\n  if (errorTaming !== 'safe' && errorTaming !== 'unsafe') {\n    throw new TypeError(`unrecognized errorTaming ${errorTaming}`);\n  }\n\n  if (stackFiltering !== 'concise' && stackFiltering !== 'verbose') {\n    throw new TypeError(`unrecognized stackFiltering ${stackFiltering}`);\n  }\n\n  const ErrorPrototype = FERAL_ERROR.prototype;\n  const platform = typeof FERAL_ERROR.captureStackTrace === 'function' ? 'v8' : 'unknown';\n  const {\n    captureStackTrace: originalCaptureStackTrace\n  } = FERAL_ERROR;\n\n  const makeErrorConstructor = function () {\n    let _ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    // eslint-disable-next-line no-shadow\n    const ResultError = function Error() {\n      let error;\n\n      for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\n        rest[_key] = arguments[_key];\n      }\n\n      if (new.target === undefined) {\n        error = apply(FERAL_ERROR, this, rest);\n      } else {\n        error = construct(FERAL_ERROR, rest, new.target);\n      }\n\n      if (platform === 'v8') {\n        // TODO Likely expensive!\n        apply(originalCaptureStackTrace, FERAL_ERROR, [error, ResultError]);\n      }\n\n      return error;\n    };\n\n    defineProperties(ResultError, {\n      length: {\n        value: 1\n      },\n      prototype: {\n        value: ErrorPrototype,\n        writable: false,\n        enumerable: false,\n        configurable: false\n      }\n    });\n    return ResultError;\n  };\n\n  const InitialError = makeErrorConstructor({\n    powers: 'original'\n  });\n  const SharedError = makeErrorConstructor({\n    powers: 'none'\n  });\n  defineProperties(ErrorPrototype, {\n    constructor: {\n      value: SharedError\n    }\n    /* TODO\n    stack: {\n      get() {\n        return '';\n      },\n      set(_) {\n        // ignore\n      },\n    },\n    */\n\n  });\n\n  for (const NativeError of NativeErrors) {\n    setPrototypeOf(NativeError, SharedError);\n  } // https://v8.dev/docs/stack-trace-api#compatibility advises that\n  // programmers can \"always\" set `Error.stackTraceLimit`\n  // even on non-v8 platforms. On non-v8\n  // it will have no effect, but this advice only makes sense\n  // if the assignment itself does not fail, which it would\n  // if `Error` were naively frozen. Hence, we add setters that\n  // accept but ignore the assignment on non-v8 platforms.\n\n\n  defineProperties(InitialError, {\n    stackTraceLimit: {\n      get() {\n        if (typeof FERAL_ERROR.stackTraceLimit === 'number') {\n          // FERAL_ERROR.stackTraceLimit is only on v8\n          return FERAL_ERROR.stackTraceLimit;\n        }\n\n        return undefined;\n      },\n\n      set(newLimit) {\n        if (typeof newLimit !== 'number') {\n          // silently do nothing. This behavior doesn't precisely\n          // emulate v8 edge-case behavior. But given the purpose\n          // of this emulation, having edge cases err towards\n          // harmless seems the safer option.\n          return;\n        }\n\n        if (typeof FERAL_ERROR.stackTraceLimit === 'number') {\n          // FERAL_ERROR.stackTraceLimit is only on v8\n          FERAL_ERROR.stackTraceLimit = newLimit; // We place the useless return on the next line to ensure\n          // that anything we place after the if in the future only\n          // happens if the then-case does not.\n          // eslint-disable-next-line no-useless-return\n\n          return;\n        }\n      },\n\n      // WTF on v8 stackTraceLimit is enumerable\n      enumerable: false,\n      configurable: true\n    }\n  }); // The default SharedError much be completely powerless even on v8,\n  // so the lenient `stackTraceLimit` accessor does nothing on all\n  // platforms.\n\n  defineProperties(SharedError, {\n    stackTraceLimit: {\n      get() {\n        return undefined;\n      },\n\n      set(_newLimit) {// do nothing\n      },\n\n      enumerable: false,\n      configurable: true\n    }\n  });\n  let initialGetStackString = tamedMethods.getStackString;\n\n  if (platform === 'v8') {\n    initialGetStackString = tameV8ErrorConstructor(FERAL_ERROR, InitialError, errorTaming, stackFiltering);\n  }\n\n  return {\n    '%InitialGetStackString%': initialGetStackString,\n    '%InitialError%': InitialError,\n    '%SharedError%': SharedError\n  };\n}","map":{"version":3,"names":["FERAL_ERROR","TypeError","apply","construct","defineProperties","setPrototypeOf","getOwnPropertyDescriptor","NativeErrors","tameV8ErrorConstructor","stackDesc","prototype","stackGetter","get","tamedMethods","getStackString","error","stack","tameErrorConstructor","errorTaming","stackFiltering","ErrorPrototype","platform","captureStackTrace","originalCaptureStackTrace","makeErrorConstructor","_","ResultError","Error","rest","new","target","undefined","length","value","writable","enumerable","configurable","InitialError","powers","SharedError","constructor","NativeError","stackTraceLimit","set","newLimit","_newLimit","initialGetStackString"],"sources":["/Users/carlostrigoseguin/Documents/KRYHA/agoric/character-builder-repo/ui/node_modules/ses/src/error/tame-error-constructor.js"],"sourcesContent":["import {\n  FERAL_ERROR,\n  TypeError,\n  apply,\n  construct,\n  defineProperties,\n  setPrototypeOf,\n  getOwnPropertyDescriptor,\n} from '../commons.js';\nimport { NativeErrors } from '../whitelist.js';\nimport { tameV8ErrorConstructor } from './tame-v8-error-constructor.js';\n\n// Present on at least FF. Proposed by Error-proposal. Not on SES whitelist\n// so grab it before it is removed.\nconst stackDesc = getOwnPropertyDescriptor(FERAL_ERROR.prototype, 'stack');\nconst stackGetter = stackDesc && stackDesc.get;\n\n// Use concise methods to obtain named functions without constructors.\nconst tamedMethods = {\n  getStackString(error) {\n    if (typeof stackGetter === 'function') {\n      return apply(stackGetter, error, []);\n    } else if ('stack' in error) {\n      // The fallback is to just use the de facto `error.stack` if present\n      return `${error.stack}`;\n    }\n    return '';\n  },\n};\n\nexport default function tameErrorConstructor(\n  errorTaming = 'safe',\n  stackFiltering = 'concise',\n) {\n  if (errorTaming !== 'safe' && errorTaming !== 'unsafe') {\n    throw new TypeError(`unrecognized errorTaming ${errorTaming}`);\n  }\n  if (stackFiltering !== 'concise' && stackFiltering !== 'verbose') {\n    throw new TypeError(`unrecognized stackFiltering ${stackFiltering}`);\n  }\n  const ErrorPrototype = FERAL_ERROR.prototype;\n\n  const platform =\n    typeof FERAL_ERROR.captureStackTrace === 'function' ? 'v8' : 'unknown';\n  const { captureStackTrace: originalCaptureStackTrace } = FERAL_ERROR;\n\n  const makeErrorConstructor = (_ = {}) => {\n    // eslint-disable-next-line no-shadow\n    const ResultError = function Error(...rest) {\n      let error;\n      if (new.target === undefined) {\n        error = apply(FERAL_ERROR, this, rest);\n      } else {\n        error = construct(FERAL_ERROR, rest, new.target);\n      }\n      if (platform === 'v8') {\n        // TODO Likely expensive!\n        apply(originalCaptureStackTrace, FERAL_ERROR, [error, ResultError]);\n      }\n      return error;\n    };\n    defineProperties(ResultError, {\n      length: { value: 1 },\n      prototype: {\n        value: ErrorPrototype,\n        writable: false,\n        enumerable: false,\n        configurable: false,\n      },\n    });\n    return ResultError;\n  };\n  const InitialError = makeErrorConstructor({ powers: 'original' });\n  const SharedError = makeErrorConstructor({ powers: 'none' });\n  defineProperties(ErrorPrototype, {\n    constructor: { value: SharedError },\n    /* TODO\n    stack: {\n      get() {\n        return '';\n      },\n      set(_) {\n        // ignore\n      },\n    },\n    */\n  });\n\n  for (const NativeError of NativeErrors) {\n    setPrototypeOf(NativeError, SharedError);\n  }\n\n  // https://v8.dev/docs/stack-trace-api#compatibility advises that\n  // programmers can \"always\" set `Error.stackTraceLimit`\n  // even on non-v8 platforms. On non-v8\n  // it will have no effect, but this advice only makes sense\n  // if the assignment itself does not fail, which it would\n  // if `Error` were naively frozen. Hence, we add setters that\n  // accept but ignore the assignment on non-v8 platforms.\n  defineProperties(InitialError, {\n    stackTraceLimit: {\n      get() {\n        if (typeof FERAL_ERROR.stackTraceLimit === 'number') {\n          // FERAL_ERROR.stackTraceLimit is only on v8\n          return FERAL_ERROR.stackTraceLimit;\n        }\n        return undefined;\n      },\n      set(newLimit) {\n        if (typeof newLimit !== 'number') {\n          // silently do nothing. This behavior doesn't precisely\n          // emulate v8 edge-case behavior. But given the purpose\n          // of this emulation, having edge cases err towards\n          // harmless seems the safer option.\n          return;\n        }\n        if (typeof FERAL_ERROR.stackTraceLimit === 'number') {\n          // FERAL_ERROR.stackTraceLimit is only on v8\n          FERAL_ERROR.stackTraceLimit = newLimit;\n          // We place the useless return on the next line to ensure\n          // that anything we place after the if in the future only\n          // happens if the then-case does not.\n          // eslint-disable-next-line no-useless-return\n          return;\n        }\n      },\n      // WTF on v8 stackTraceLimit is enumerable\n      enumerable: false,\n      configurable: true,\n    },\n  });\n\n  // The default SharedError much be completely powerless even on v8,\n  // so the lenient `stackTraceLimit` accessor does nothing on all\n  // platforms.\n  defineProperties(SharedError, {\n    stackTraceLimit: {\n      get() {\n        return undefined;\n      },\n      set(_newLimit) {\n        // do nothing\n      },\n      enumerable: false,\n      configurable: true,\n    },\n  });\n\n  let initialGetStackString = tamedMethods.getStackString;\n  if (platform === 'v8') {\n    initialGetStackString = tameV8ErrorConstructor(\n      FERAL_ERROR,\n      InitialError,\n      errorTaming,\n      stackFiltering,\n    );\n  }\n  return {\n    '%InitialGetStackString%': initialGetStackString,\n    '%InitialError%': InitialError,\n    '%SharedError%': SharedError,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}