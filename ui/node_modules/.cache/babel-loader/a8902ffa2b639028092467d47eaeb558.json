{"ast":null,"code":"// @ts-check\nimport { Far } from '../make-far.js';\n/**\n * The result iterator has as many elements as the `baseIterator` and\n * have the same termination -- the same completion value or failure\n * reason. But the non-final values are the corresponding non-final\n * values from `baseIterator` as transformed by `func`.\n *\n * @template T,U\n * @param {Iterable<T>} baseIterable\n * @param {(value: T) => U} func\n * @returns {Iterable<U>}\n */\n\nexport const mapIterable = (baseIterable, func) =>\n/** @type {Iterable<U>} */\nFar('mapped iterable', {\n  [Symbol.iterator]: () => {\n    const baseIterator = baseIterable[Symbol.iterator]();\n    return Far('mapped iterator', {\n      next: () => {\n        const {\n          value: baseValue,\n          done\n        } = baseIterator.next();\n        const value = done ? baseValue : func(baseValue);\n        return harden({\n          value,\n          done\n        });\n      }\n    });\n  }\n});\nharden(mapIterable);\n/**\n * The result iterator has a subset of the non-final values from the\n * `baseIterator` --- those for which `pred(value)` was truthy. The result\n * has the same termination as the `baseIterator` -- the same completion value\n * or failure reason.\n *\n * @template T\n * @param {Iterable<T>} baseIterable\n * @param {(value: T) => boolean} pred\n * @returns {Iterable<T>}\n */\n\nexport const filterIterable = (baseIterable, pred) =>\n/** @type {Iterable<U>} */\nFar('filtered iterable', {\n  [Symbol.iterator]: () => {\n    const baseIterator = baseIterable[Symbol.iterator]();\n    return Far('filtered iterator', {\n      next: () => {\n        for (;;) {\n          const result = baseIterator.next();\n          const {\n            value,\n            done\n          } = result;\n\n          if (done || pred(value)) {\n            return result;\n          }\n        }\n      }\n    });\n  }\n});\nharden(filterIterable);","map":{"version":3,"names":["Far","mapIterable","baseIterable","func","Symbol","iterator","baseIterator","next","value","baseValue","done","harden","filterIterable","pred","result"],"sources":["/Users/carlostrigoseguin/Documents/KRYHA/agoric/character-builder-repo/ui/node_modules/@endo/marshal/src/helpers/iter-helpers.js"],"sourcesContent":["// @ts-check\n\nimport { Far } from '../make-far.js';\n\n/**\n * The result iterator has as many elements as the `baseIterator` and\n * have the same termination -- the same completion value or failure\n * reason. But the non-final values are the corresponding non-final\n * values from `baseIterator` as transformed by `func`.\n *\n * @template T,U\n * @param {Iterable<T>} baseIterable\n * @param {(value: T) => U} func\n * @returns {Iterable<U>}\n */\nexport const mapIterable = (baseIterable, func) =>\n  /** @type {Iterable<U>} */\n  Far('mapped iterable', {\n    [Symbol.iterator]: () => {\n      const baseIterator = baseIterable[Symbol.iterator]();\n      return Far('mapped iterator', {\n        next: () => {\n          const { value: baseValue, done } = baseIterator.next();\n          const value = done ? baseValue : func(baseValue);\n          return harden({ value, done });\n        },\n      });\n    },\n  });\nharden(mapIterable);\n\n/**\n * The result iterator has a subset of the non-final values from the\n * `baseIterator` --- those for which `pred(value)` was truthy. The result\n * has the same termination as the `baseIterator` -- the same completion value\n * or failure reason.\n *\n * @template T\n * @param {Iterable<T>} baseIterable\n * @param {(value: T) => boolean} pred\n * @returns {Iterable<T>}\n */\nexport const filterIterable = (baseIterable, pred) =>\n  /** @type {Iterable<U>} */\n  Far('filtered iterable', {\n    [Symbol.iterator]: () => {\n      const baseIterator = baseIterable[Symbol.iterator]();\n      return Far('filtered iterator', {\n        next: () => {\n          for (;;) {\n            const result = baseIterator.next();\n            const { value, done } = result;\n            if (done || pred(value)) {\n              return result;\n            }\n          }\n        },\n      });\n    },\n  });\nharden(filterIterable);\n"],"mappings":"AAAA;AAEA,SAASA,GAAT,QAAoB,gBAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAG,CAACC,YAAD,EAAeC,IAAf;AACzB;AACAH,GAAG,CAAC,iBAAD,EAAoB;EACrB,CAACI,MAAM,CAACC,QAAR,GAAmB,MAAM;IACvB,MAAMC,YAAY,GAAGJ,YAAY,CAACE,MAAM,CAACC,QAAR,CAAZ,EAArB;IACA,OAAOL,GAAG,CAAC,iBAAD,EAAoB;MAC5BO,IAAI,EAAE,MAAM;QACV,MAAM;UAAEC,KAAK,EAAEC,SAAT;UAAoBC;QAApB,IAA6BJ,YAAY,CAACC,IAAb,EAAnC;QACA,MAAMC,KAAK,GAAGE,IAAI,GAAGD,SAAH,GAAeN,IAAI,CAACM,SAAD,CAArC;QACA,OAAOE,MAAM,CAAC;UAAEH,KAAF;UAASE;QAAT,CAAD,CAAb;MACD;IAL2B,CAApB,CAAV;EAOD;AAVoB,CAApB,CAFE;AAcPC,MAAM,CAACV,WAAD,CAAN;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMW,cAAc,GAAG,CAACV,YAAD,EAAeW,IAAf;AAC5B;AACAb,GAAG,CAAC,mBAAD,EAAsB;EACvB,CAACI,MAAM,CAACC,QAAR,GAAmB,MAAM;IACvB,MAAMC,YAAY,GAAGJ,YAAY,CAACE,MAAM,CAACC,QAAR,CAAZ,EAArB;IACA,OAAOL,GAAG,CAAC,mBAAD,EAAsB;MAC9BO,IAAI,EAAE,MAAM;QACV,SAAS;UACP,MAAMO,MAAM,GAAGR,YAAY,CAACC,IAAb,EAAf;UACA,MAAM;YAAEC,KAAF;YAASE;UAAT,IAAkBI,MAAxB;;UACA,IAAIJ,IAAI,IAAIG,IAAI,CAACL,KAAD,CAAhB,EAAyB;YACvB,OAAOM,MAAP;UACD;QACF;MACF;IAT6B,CAAtB,CAAV;EAWD;AAdsB,CAAtB,CAFE;AAkBPH,MAAM,CAACC,cAAD,CAAN"},"metadata":{},"sourceType":"module"}