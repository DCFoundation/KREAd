{"ast":null,"code":"import { WeakSet, defineProperty, freeze, functionPrototype, functionToString, stringEndsWith, weaksetAdd, weaksetHas } from './commons.js';\nconst nativeSuffix = ') { [native code] }'; // Note: Top level mutable state. Does not make anything worse, since the\n// patching of `Function.prototype.toString` is also globally stateful. We\n// use this top level state so that multiple calls to `tameFunctionToString` are\n// idempotent, rather than creating redundant indirections.\n\nlet markVirtualizedNativeFunction;\n/**\n * Replace `Function.prototype.toString` with one that recognizes\n * shimmed functions as honorary native functions.\n */\n\nexport const tameFunctionToString = () => {\n  if (markVirtualizedNativeFunction === undefined) {\n    const virtualizedNativeFunctions = new WeakSet();\n    const tamingMethods = {\n      toString() {\n        const str = functionToString(this, []);\n\n        if (stringEndsWith(str, nativeSuffix) || !weaksetHas(virtualizedNativeFunctions, this)) {\n          return str;\n        }\n\n        return `function ${this.name}() { [native code] }`;\n      }\n\n    };\n    defineProperty(functionPrototype, 'toString', {\n      value: tamingMethods.toString\n    });\n    markVirtualizedNativeFunction = freeze(func => weaksetAdd(virtualizedNativeFunctions, func));\n  }\n\n  return markVirtualizedNativeFunction;\n};","map":{"version":3,"names":["WeakSet","defineProperty","freeze","functionPrototype","functionToString","stringEndsWith","weaksetAdd","weaksetHas","nativeSuffix","markVirtualizedNativeFunction","tameFunctionToString","undefined","virtualizedNativeFunctions","tamingMethods","toString","str","name","value","func"],"sources":["/Users/carlostrigoseguin/Documents/KRYHA/agoric/character-builder-repo/ui/node_modules/ses/src/tame-function-tostring.js"],"sourcesContent":["import {\n  WeakSet,\n  defineProperty,\n  freeze,\n  functionPrototype,\n  functionToString,\n  stringEndsWith,\n  weaksetAdd,\n  weaksetHas,\n} from './commons.js';\n\nconst nativeSuffix = ') { [native code] }';\n\n// Note: Top level mutable state. Does not make anything worse, since the\n// patching of `Function.prototype.toString` is also globally stateful. We\n// use this top level state so that multiple calls to `tameFunctionToString` are\n// idempotent, rather than creating redundant indirections.\nlet markVirtualizedNativeFunction;\n\n/**\n * Replace `Function.prototype.toString` with one that recognizes\n * shimmed functions as honorary native functions.\n */\nexport const tameFunctionToString = () => {\n  if (markVirtualizedNativeFunction === undefined) {\n    const virtualizedNativeFunctions = new WeakSet();\n\n    const tamingMethods = {\n      toString() {\n        const str = functionToString(this, []);\n        if (\n          stringEndsWith(str, nativeSuffix) ||\n          !weaksetHas(virtualizedNativeFunctions, this)\n        ) {\n          return str;\n        }\n        return `function ${this.name}() { [native code] }`;\n      },\n    };\n\n    defineProperty(functionPrototype, 'toString', {\n      value: tamingMethods.toString,\n    });\n\n    markVirtualizedNativeFunction = freeze(func =>\n      weaksetAdd(virtualizedNativeFunctions, func),\n    );\n  }\n  return markVirtualizedNativeFunction;\n};\n"],"mappings":"AAAA,SACEA,OADF,EAEEC,cAFF,EAGEC,MAHF,EAIEC,iBAJF,EAKEC,gBALF,EAMEC,cANF,EAOEC,UAPF,EAQEC,UARF,QASO,cATP;AAWA,MAAMC,YAAY,GAAG,qBAArB,C,CAEA;AACA;AACA;AACA;;AACA,IAAIC,6BAAJ;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,oBAAoB,GAAG,MAAM;EACxC,IAAID,6BAA6B,KAAKE,SAAtC,EAAiD;IAC/C,MAAMC,0BAA0B,GAAG,IAAIZ,OAAJ,EAAnC;IAEA,MAAMa,aAAa,GAAG;MACpBC,QAAQ,GAAG;QACT,MAAMC,GAAG,GAAGX,gBAAgB,CAAC,IAAD,EAAO,EAAP,CAA5B;;QACA,IACEC,cAAc,CAACU,GAAD,EAAMP,YAAN,CAAd,IACA,CAACD,UAAU,CAACK,0BAAD,EAA6B,IAA7B,CAFb,EAGE;UACA,OAAOG,GAAP;QACD;;QACD,OAAQ,YAAW,KAAKC,IAAK,sBAA7B;MACD;;IAVmB,CAAtB;IAaAf,cAAc,CAACE,iBAAD,EAAoB,UAApB,EAAgC;MAC5Cc,KAAK,EAAEJ,aAAa,CAACC;IADuB,CAAhC,CAAd;IAIAL,6BAA6B,GAAGP,MAAM,CAACgB,IAAI,IACzCZ,UAAU,CAACM,0BAAD,EAA6BM,IAA7B,CAD0B,CAAtC;EAGD;;EACD,OAAOT,6BAAP;AACD,CA1BM"},"metadata":{},"sourceType":"module"}