{"ast":null,"code":"/* eslint-disable */\n\n/* global process */\nimport dappConstants from '../constants.js';\nconst {\n  API_URL,\n  BRIDGE_URL,\n  CONTRACT_NAME\n} = dappConstants; // === WEB SOCKET\n\nconst endpointToSocket = new Map();\n\nfunction logMsg(obj) {\n  let direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'send:';\n  const type = obj.type;\n\n  switch (type) {\n    case undefined:\n      // Skip untyped objects.\n      // console.log(direction, obj);\n      return;\n\n    case 'CTP_CALL':\n      console.log(direction, type, obj.method && obj.method.body, obj);\n      return;\n\n    case 'CTP_RETURN':\n      console.log(direction, type, (obj.exception || obj.result).body, obj);\n      return;\n\n    default:\n      console.log(direction, type, obj);\n  }\n}\n\nfunction getWebSocketEndpoint(endpoint) {\n  // TODO proxy socket.\n  let url;\n\n  if (endpoint === '/api') {\n    url = new URL(endpoint, API_URL || window.origin);\n  } else {\n    url = new URL(endpoint, BRIDGE_URL || window.origin);\n  }\n\n  url.protocol = url.protocol.replace(/^http/, 'ws');\n  return url;\n}\n\nconst walletBridgeId = 'walletBridgeIFrame';\nlet walletLoaded = false;\nconst connectSubscriptions = new Set();\nconst messageSubscriptions = new Set();\n\nfunction createSocket(_ref, endpoint) {\n  let {\n    onConnect,\n    onDisconnect,\n    onMessage\n  } = _ref;\n\n  if (endpoint === '/private/wallet-bridge') {\n    let ifr = document.getElementById(walletBridgeId);\n\n    if (!ifr) {\n      ifr = document.createElement('iframe');\n      ifr.id = walletBridgeId;\n      ifr.setAttribute('width', '0');\n      ifr.setAttribute('height', '0');\n      ifr.setAttribute('style', 'display: none');\n      document.body.appendChild(ifr);\n      window.addEventListener('message', ev => {\n        // console.log('dapp ui got', ev);\n        logMsg(ev.data, 'recv');\n\n        if (ev.data && ev.data.type === 'walletBridgeLoaded') {\n          walletLoaded = true;\n\n          for (const sub of connectSubscriptions.keys()) {\n            sub();\n          }\n\n          connectSubscriptions.clear();\n        } else {\n          const msg = JSON.stringify(ev.data);\n\n          for (const sub of messageSubscriptions.keys()) {\n            sub(msg);\n          }\n        }\n      });\n    }\n\n    let ifrQ = [];\n    ifr.src = `${process.env.PUBLIC_URL}/agoric-wallet.html?suggestedDappPetname=${encodeURIComponent(CONTRACT_NAME)}`;\n    ifr.addEventListener('load', () => {\n      while (ifrQ && ifrQ.length) {\n        const obj = ifrQ.shift();\n        logMsg(obj);\n        ifr.contentWindow.postMessage(obj, window.origin);\n      }\n\n      ifrQ = undefined;\n    });\n\n    if (onMessage) {\n      messageSubscriptions.add(onMessage);\n    }\n\n    const messageListeners = new Set();\n    endpointToSocket.set(endpoint, {\n      send(msg) {\n        const obj = JSON.parse(msg);\n\n        if (ifrQ) {\n          ifrQ.push(obj);\n        } else {\n          logMsg(obj);\n          ifr.contentWindow.postMessage(obj, window.origin);\n        }\n      },\n\n      close() {\n        walletLoaded = false;\n\n        if (onConnect) {\n          connectSubscriptions.delete(onConnect);\n        }\n\n        if (onMessage) {\n          messageSubscriptions.delete(onMessage);\n        }\n\n        for (const sub of messageListeners.keys()) {\n          messageSubscriptions.delete(sub);\n        }\n\n        const ifr2 = document.getElementById(walletBridgeId);\n\n        if (ifr2) {\n          ifr2.src = '';\n        }\n\n        if (onDisconnect) {\n          onDisconnect();\n        }\n      },\n\n      addEventListener(kind, cb) {\n        if (kind !== 'message') {\n          throw Error(`Cannot bridge.addEventListener kind ${kind}`);\n        }\n\n        const onmsg = data => cb({\n          data\n        });\n\n        messageListeners.add(onmsg);\n        messageSubscriptions.add(onmsg);\n      },\n\n      removeEventListener(kind, cb) {\n        if (kind !== 'message') {\n          throw Error(`Cannot bridge.removeEventListener kind ${kind}`);\n        }\n\n        messageSubscriptions.delete(cb);\n        messageListeners.delete(cb);\n      }\n\n    });\n\n    if (onConnect) {\n      if (walletLoaded) {\n        onConnect();\n      } else {\n        connectSubscriptions.add(onConnect);\n      }\n    }\n\n    return;\n  }\n\n  const socket = new WebSocket(getWebSocketEndpoint(endpoint));\n  endpointToSocket.set(endpoint, socket);\n\n  if (onConnect) {\n    socket.addEventListener('open', () => onConnect());\n  }\n\n  if (onDisconnect) {\n    socket.addEventListener('close', () => onDisconnect());\n  }\n\n  if (onMessage) {\n    socket.addEventListener('message', _ref2 => {\n      let {\n        data\n      } = _ref2;\n      return onMessage(data);\n    });\n  }\n}\n\nfunction closeSocket(endpoint) {\n  const socket = endpointToSocket.get(endpoint);\n  socket.close();\n  endpointToSocket.delete(endpoint);\n}\n\nexport function getActiveSocket() {\n  let endpoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/private/wallet-bridge';\n  return endpointToSocket.get(endpoint);\n}\nexport function activateWebSocket() {\n  let socketListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let endpoint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/private/wallet-bridge';\n  if (getActiveSocket(endpoint)) return;\n  createSocket(socketListeners, endpoint);\n}\nexport function deactivateWebSocket() {\n  let endpoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/private/wallet-bridge';\n  if (!getActiveSocket(endpoint)) return;\n  closeSocket(endpoint);\n} // === FETCH\n\nexport async function doFetch(req) {\n  let endpoint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/private/wallet-bridge';\n  // Use the socket directly.\n  const socket = getActiveSocket(endpoint);\n\n  if (!socket) {\n    throw Error(`Must activate socket before doFetch to ${endpoint}`);\n  }\n\n  let resolve;\n  const p = new Promise(res => {\n    resolve = res;\n  });\n  socket.send(JSON.stringify(req));\n  const expectedResponse = `${req.type}Response`;\n\n  function getResponse(_ref3) {\n    let {\n      data: msg\n    } = _ref3;\n    // console.log('got', msg);\n    const obj = JSON.parse(msg);\n    logMsg(obj, 'recv:');\n\n    if (obj.type === expectedResponse) {\n      resolve(obj);\n      socket.removeEventListener('message', getResponse);\n    }\n  }\n\n  socket.addEventListener('message', getResponse);\n  return p;\n}","map":{"version":3,"names":["dappConstants","API_URL","BRIDGE_URL","CONTRACT_NAME","endpointToSocket","Map","logMsg","obj","direction","type","undefined","console","log","method","body","exception","result","getWebSocketEndpoint","endpoint","url","URL","window","origin","protocol","replace","walletBridgeId","walletLoaded","connectSubscriptions","Set","messageSubscriptions","createSocket","onConnect","onDisconnect","onMessage","ifr","document","getElementById","createElement","id","setAttribute","appendChild","addEventListener","ev","data","sub","keys","clear","msg","JSON","stringify","ifrQ","src","process","env","PUBLIC_URL","encodeURIComponent","length","shift","contentWindow","postMessage","add","messageListeners","set","send","parse","push","close","delete","ifr2","kind","cb","Error","onmsg","removeEventListener","socket","WebSocket","closeSocket","get","getActiveSocket","activateWebSocket","socketListeners","deactivateWebSocket","doFetch","req","resolve","p","Promise","res","expectedResponse","getResponse"],"sources":["/Users/carlostrigoseguin/Documents/KRYHA/agoric/character-builder-repo/ui/src/service/utils/fetch-websocket.js"],"sourcesContent":["/* eslint-disable */\n\n/* global process */\nimport dappConstants from '../constants.js';\n\nconst { API_URL, BRIDGE_URL, CONTRACT_NAME } = dappConstants;\n\n// === WEB SOCKET\n\nconst endpointToSocket = new Map();\n\nfunction logMsg(obj, direction = 'send:') {\n  const type = obj.type;\n  switch (type) {\n    case undefined:\n      // Skip untyped objects.\n      // console.log(direction, obj);\n      return;\n    case 'CTP_CALL':\n      console.log(direction, type, obj.method && obj.method.body, obj);\n      return;\n    case 'CTP_RETURN':\n      console.log(direction, type, (obj.exception || obj.result).body, obj);\n      return;\n    default:\n      console.log(direction, type, obj);\n  }\n}\n\nfunction getWebSocketEndpoint(endpoint) {\n  // TODO proxy socket.\n  let url;\n  if (endpoint === '/api') {\n    url = new URL(endpoint, API_URL || window.origin);\n  } else {\n    url = new URL(endpoint, BRIDGE_URL || window.origin);\n  }\n  url.protocol = url.protocol.replace(/^http/, 'ws');\n  return url;\n}\n\nconst walletBridgeId = 'walletBridgeIFrame';\nlet walletLoaded = false;\nconst connectSubscriptions = new Set();\nconst messageSubscriptions = new Set();\nfunction createSocket({ onConnect, onDisconnect, onMessage }, endpoint) {\n  if (endpoint === '/private/wallet-bridge') {\n    let ifr = document.getElementById(walletBridgeId);\n    if (!ifr) {\n      ifr = document.createElement('iframe');\n      ifr.id = walletBridgeId;\n      ifr.setAttribute('width', '0');\n      ifr.setAttribute('height', '0');\n      ifr.setAttribute('style', 'display: none');\n      document.body.appendChild(ifr);\n      window.addEventListener('message', ev => {\n        // console.log('dapp ui got', ev);\n        logMsg(ev.data, 'recv');\n        if (ev.data && ev.data.type === 'walletBridgeLoaded') {\n          walletLoaded = true;\n          for (const sub of connectSubscriptions.keys()) {\n            sub();\n          }\n          connectSubscriptions.clear();\n        } else {\n          const msg = JSON.stringify(ev.data);\n          for (const sub of messageSubscriptions.keys()) {\n            sub(msg);\n          }\n        }\n      });\n    }\n    let ifrQ = [];\n    ifr.src = `${\n      process.env.PUBLIC_URL\n    }/agoric-wallet.html?suggestedDappPetname=${encodeURIComponent(\n      CONTRACT_NAME,\n    )}`;\n    ifr.addEventListener('load', () => {\n      while (ifrQ && ifrQ.length) {\n        const obj = ifrQ.shift();\n        logMsg(obj);\n        ifr.contentWindow.postMessage(obj, window.origin);\n      }\n      ifrQ = undefined;\n    });\n    if (onMessage) {\n      messageSubscriptions.add(onMessage);\n    }\n    const messageListeners = new Set();\n    endpointToSocket.set(endpoint, {\n      send(msg) {\n        const obj = JSON.parse(msg);\n        if (ifrQ) {\n          ifrQ.push(obj);\n        } else {\n          logMsg(obj);\n          ifr.contentWindow.postMessage(obj, window.origin);\n        }\n      },\n      close() {\n        walletLoaded = false;\n        if (onConnect) {\n          connectSubscriptions.delete(onConnect);\n        }\n        if (onMessage) {\n          messageSubscriptions.delete(onMessage);\n        }\n        for (const sub of messageListeners.keys()) {\n          messageSubscriptions.delete(sub);\n        }\n        const ifr2 = document.getElementById(walletBridgeId);\n        if (ifr2) {\n          ifr2.src = '';\n        }\n\n        if (onDisconnect) {\n          onDisconnect();\n        }\n      },\n      addEventListener(kind, cb) {\n        if (kind !== 'message') {\n          throw Error(`Cannot bridge.addEventListener kind ${kind}`);\n        }\n        const onmsg = data => cb({ data });\n        messageListeners.add(onmsg);\n        messageSubscriptions.add(onmsg);\n      },\n      removeEventListener(kind, cb) {\n        if (kind !== 'message') {\n          throw Error(`Cannot bridge.removeEventListener kind ${kind}`);\n        }\n        messageSubscriptions.delete(cb);\n        messageListeners.delete(cb);\n      },\n    });\n\n    if (onConnect) {\n      if (walletLoaded) {\n        onConnect();\n      } else {\n        connectSubscriptions.add(onConnect);\n      }\n    }\n    return;\n  }\n\n  const socket = new WebSocket(getWebSocketEndpoint(endpoint));\n  endpointToSocket.set(endpoint, socket);\n  if (onConnect) {\n    socket.addEventListener('open', () => onConnect());\n  }\n  if (onDisconnect) {\n    socket.addEventListener('close', () => onDisconnect());\n  }\n  if (onMessage) {\n    socket.addEventListener('message', ({ data }) => onMessage(data));\n  }\n}\n\nfunction closeSocket(endpoint) {\n  const socket = endpointToSocket.get(endpoint);\n  socket.close();\n  endpointToSocket.delete(endpoint);\n}\n\nexport function getActiveSocket(endpoint = '/private/wallet-bridge') {\n  return endpointToSocket.get(endpoint);\n}\n\nexport function activateWebSocket(\n  socketListeners = {},\n  endpoint = '/private/wallet-bridge',\n) {\n  if (getActiveSocket(endpoint)) return;\n  createSocket(socketListeners, endpoint);\n}\n\nexport function deactivateWebSocket(endpoint = '/private/wallet-bridge') {\n  if (!getActiveSocket(endpoint)) return;\n  closeSocket(endpoint);\n}\n\n// === FETCH\n\nexport async function doFetch(req, endpoint = '/private/wallet-bridge') {\n  // Use the socket directly.\n  const socket = getActiveSocket(endpoint);\n  if (!socket) {\n    throw Error(`Must activate socket before doFetch to ${endpoint}`);\n  }\n\n  let resolve;\n  const p = new Promise(res => {\n    resolve = res;\n  });\n  socket.send(JSON.stringify(req));\n  const expectedResponse = `${req.type}Response`;\n  function getResponse({ data: msg }) {\n    // console.log('got', msg);\n    const obj = JSON.parse(msg);\n    logMsg(obj, 'recv:');\n    if (obj.type === expectedResponse) {\n      resolve(obj);\n      socket.removeEventListener('message', getResponse);\n    }\n  }\n  socket.addEventListener('message', getResponse);\n  return p;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}