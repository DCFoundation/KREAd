{"ast":null,"code":"/* global globalThis */\n// @ts-nocheck\n// NOTE: We can't import these because they're not in scope before lockdown.\n// import { assert, details as X } from '@agoric/assert';\n// WARNING: Global Mutable State!\n// This state is communicated to `assert` that makes it available to the\n// causal console, which affects the console log output. Normally we\n// regard the ability to see console log output as a meta-level privilege\n// analogous to the ability to debug. Aside from that, this module should\n// not have any observably mutable state.\nlet hiddenPriorError;\nlet hiddenCurrentTurn = 0;\nlet hiddenCurrentEvent = 0; // Turn on if you seem to be losing error logging at the top of the event loop\n\nconst VERBOSE = false;\n/**\n * @typedef {((...args: any[]) => any) | undefined} TurnStarterFn\n * An optional function that is not this-sensitive, expected to be called at\n * bottom of stack to start a new turn.\n */\n\n/**\n * @template {TurnStarterFn[]} T\n * Given a list of `TurnStarterFn`s, returns a list of `TurnStarterFn`s whose\n * `this`-free call behaviors are not observably different to those that\n * cannot see console output. The only purpose is to cause additional\n * information to appear on the console.\n *\n * The call to `trackTurns` is itself a sending event, that occurs in some call\n * stack in some turn number at some event number within that turn. Each call\n * to any of the returned `TurnStartFn`s is a receiving event that begins a new\n * turn. This sending event caused each of those receiving events.\n *\n * @param {T} funcs\n * @returns {T}\n */\n\nexport const trackTurns = funcs => {\n  if (typeof globalThis === 'undefined' || !globalThis.assert) {\n    return funcs;\n  }\n\n  const {\n    details: X\n  } = assert;\n  hiddenCurrentEvent += 1;\n  const sendingError = new Error(`Event: ${hiddenCurrentTurn}.${hiddenCurrentEvent}`);\n\n  if (hiddenPriorError !== undefined) {\n    assert.note(sendingError, X`Caused by: ${hiddenPriorError}`);\n  }\n\n  return funcs.map(func => func && function () {\n    hiddenPriorError = sendingError;\n    hiddenCurrentTurn += 1;\n    hiddenCurrentEvent = 0;\n\n    try {\n      let result;\n\n      try {\n        result = func(...arguments);\n      } catch (err) {\n        if (err instanceof Error) {\n          assert.note(err, X`Thrown from: ${hiddenPriorError}:${hiddenCurrentTurn}.${hiddenCurrentEvent}`);\n        }\n\n        if (VERBOSE) {\n          console.log('THROWN to top of event loop', err);\n        }\n\n        throw err;\n      } // Must capture this now, not when the catch triggers.\n\n\n      const detailsNote = X`Rejection from: ${hiddenPriorError}:${hiddenCurrentTurn}.${hiddenCurrentEvent}`;\n      Promise.resolve(result).catch(reason => {\n        if (reason instanceof Error) {\n          assert.note(reason, detailsNote);\n        }\n\n        if (VERBOSE) {\n          console.log('REJECTED at top of event loop', reason);\n        }\n      });\n      return result;\n    } finally {\n      hiddenPriorError = undefined;\n    }\n  });\n};","map":{"version":3,"names":["hiddenPriorError","hiddenCurrentTurn","hiddenCurrentEvent","VERBOSE","trackTurns","funcs","globalThis","assert","details","X","sendingError","Error","undefined","note","map","func","result","err","console","log","detailsNote","Promise","resolve","catch","reason"],"sources":["/Users/carlostrigoseguin/Documents/KRYHA/agoric/character-builder-repo/ui/node_modules/@endo/eventual-send/src/track-turns.js"],"sourcesContent":["/* global globalThis */\n// @ts-nocheck\n\n// NOTE: We can't import these because they're not in scope before lockdown.\n// import { assert, details as X } from '@agoric/assert';\n\n// WARNING: Global Mutable State!\n// This state is communicated to `assert` that makes it available to the\n// causal console, which affects the console log output. Normally we\n// regard the ability to see console log output as a meta-level privilege\n// analogous to the ability to debug. Aside from that, this module should\n// not have any observably mutable state.\n\nlet hiddenPriorError;\nlet hiddenCurrentTurn = 0;\nlet hiddenCurrentEvent = 0;\n\n// Turn on if you seem to be losing error logging at the top of the event loop\nconst VERBOSE = false;\n\n/**\n * @typedef {((...args: any[]) => any) | undefined} TurnStarterFn\n * An optional function that is not this-sensitive, expected to be called at\n * bottom of stack to start a new turn.\n */\n\n/**\n * @template {TurnStarterFn[]} T\n * Given a list of `TurnStarterFn`s, returns a list of `TurnStarterFn`s whose\n * `this`-free call behaviors are not observably different to those that\n * cannot see console output. The only purpose is to cause additional\n * information to appear on the console.\n *\n * The call to `trackTurns` is itself a sending event, that occurs in some call\n * stack in some turn number at some event number within that turn. Each call\n * to any of the returned `TurnStartFn`s is a receiving event that begins a new\n * turn. This sending event caused each of those receiving events.\n *\n * @param {T} funcs\n * @returns {T}\n */\nexport const trackTurns = funcs => {\n  if (typeof globalThis === 'undefined' || !globalThis.assert) {\n    return funcs;\n  }\n  const { details: X } = assert;\n\n  hiddenCurrentEvent += 1;\n  const sendingError = new Error(\n    `Event: ${hiddenCurrentTurn}.${hiddenCurrentEvent}`,\n  );\n  if (hiddenPriorError !== undefined) {\n    assert.note(sendingError, X`Caused by: ${hiddenPriorError}`);\n  }\n\n  return funcs.map(\n    func =>\n      func &&\n      ((...args) => {\n        hiddenPriorError = sendingError;\n        hiddenCurrentTurn += 1;\n        hiddenCurrentEvent = 0;\n        try {\n          let result;\n          try {\n            result = func(...args);\n          } catch (err) {\n            if (err instanceof Error) {\n              assert.note(\n                err,\n                X`Thrown from: ${hiddenPriorError}:${hiddenCurrentTurn}.${hiddenCurrentEvent}`,\n              );\n            }\n            if (VERBOSE) {\n              console.log('THROWN to top of event loop', err);\n            }\n            throw err;\n          }\n          // Must capture this now, not when the catch triggers.\n          const detailsNote = X`Rejection from: ${hiddenPriorError}:${hiddenCurrentTurn}.${hiddenCurrentEvent}`;\n          Promise.resolve(result).catch(reason => {\n            if (reason instanceof Error) {\n              assert.note(reason, detailsNote);\n            }\n            if (VERBOSE) {\n              console.log('REJECTED at top of event loop', reason);\n            }\n          });\n          return result;\n        } finally {\n          hiddenPriorError = undefined;\n        }\n      }),\n  );\n};\n"],"mappings":"AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,gBAAJ;AACA,IAAIC,iBAAiB,GAAG,CAAxB;AACA,IAAIC,kBAAkB,GAAG,CAAzB,C,CAEA;;AACA,MAAMC,OAAO,GAAG,KAAhB;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAGC,KAAK,IAAI;EACjC,IAAI,OAAOC,UAAP,KAAsB,WAAtB,IAAqC,CAACA,UAAU,CAACC,MAArD,EAA6D;IAC3D,OAAOF,KAAP;EACD;;EACD,MAAM;IAAEG,OAAO,EAAEC;EAAX,IAAiBF,MAAvB;EAEAL,kBAAkB,IAAI,CAAtB;EACA,MAAMQ,YAAY,GAAG,IAAIC,KAAJ,CAClB,UAASV,iBAAkB,IAAGC,kBAAmB,EAD/B,CAArB;;EAGA,IAAIF,gBAAgB,KAAKY,SAAzB,EAAoC;IAClCL,MAAM,CAACM,IAAP,CAAYH,YAAZ,EAA0BD,CAAE,cAAaT,gBAAiB,EAA1D;EACD;;EAED,OAAOK,KAAK,CAACS,GAAN,CACLC,IAAI,IACFA,IAAI,IACH,YAAa;IACZf,gBAAgB,GAAGU,YAAnB;IACAT,iBAAiB,IAAI,CAArB;IACAC,kBAAkB,GAAG,CAArB;;IACA,IAAI;MACF,IAAIc,MAAJ;;MACA,IAAI;QACFA,MAAM,GAAGD,IAAI,CAAC,YAAD,CAAb;MACD,CAFD,CAEE,OAAOE,GAAP,EAAY;QACZ,IAAIA,GAAG,YAAYN,KAAnB,EAA0B;UACxBJ,MAAM,CAACM,IAAP,CACEI,GADF,EAEER,CAAE,gBAAeT,gBAAiB,IAAGC,iBAAkB,IAAGC,kBAAmB,EAF/E;QAID;;QACD,IAAIC,OAAJ,EAAa;UACXe,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CF,GAA3C;QACD;;QACD,MAAMA,GAAN;MACD,CAfC,CAgBF;;;MACA,MAAMG,WAAW,GAAGX,CAAE,mBAAkBT,gBAAiB,IAAGC,iBAAkB,IAAGC,kBAAmB,EAApG;MACAmB,OAAO,CAACC,OAAR,CAAgBN,MAAhB,EAAwBO,KAAxB,CAA8BC,MAAM,IAAI;QACtC,IAAIA,MAAM,YAAYb,KAAtB,EAA6B;UAC3BJ,MAAM,CAACM,IAAP,CAAYW,MAAZ,EAAoBJ,WAApB;QACD;;QACD,IAAIjB,OAAJ,EAAa;UACXe,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CK,MAA7C;QACD;MACF,CAPD;MAQA,OAAOR,MAAP;IACD,CA3BD,SA2BU;MACRhB,gBAAgB,GAAGY,SAAnB;IACD;EACF,CArCE,CAAP;AAuCD,CArDM"},"metadata":{},"sourceType":"module"}