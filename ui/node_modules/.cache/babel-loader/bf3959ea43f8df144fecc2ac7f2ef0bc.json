{"ast":null,"code":"// Copyright (C) 2011 Google Inc.\n// Copyright (C) 2018 Agoric\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// @ts-check\n\n/**\n * Is `allegedNum` a number in the [contiguous range of exactly and\n * unambiguously\n * representable](https://esdiscuss.org/topic/more-numeric-constants-please-especially-epsilon#content-14)\n *  natural numbers (non-negative integers)?\n *\n * To qualify `allegedNum` must either be a\n * non-negative `bigint`, or a non-negative `number` representing an integer\n * within range of [integers safely representable in\n * floating point](https://tc39.es/ecma262/#sec-number.issafeinteger).\n *\n * @param {unknown} allegedNum\n * @returns {boolean}\n */\nfunction isNat(allegedNum) {\n  if (typeof allegedNum === 'bigint') {\n    return allegedNum >= 0;\n  }\n\n  if (typeof allegedNum !== 'number') {\n    return false;\n  }\n\n  return Number.isSafeInteger(allegedNum) && allegedNum >= 0;\n}\n/**\n * If `allegedNumber` passes the `isNat` test, then return it as a bigint.\n * Otherwise throw an appropriate error.\n *\n * If `allegedNum` is neither a bigint nor a number, `Nat` throws a `TypeError`.\n * Otherwise, if it is not a [safely\n * representable](https://esdiscuss.org/topic/more-numeric-constants-please-especially-epsilon#content-14)\n * non-negative integer, `Nat` throws a `RangeError`.\n * Otherwise, it is converted to a bigint if necessary and returned.\n *\n * @param {unknown} allegedNum\n * @returns {bigint}\n */\n\n\nfunction Nat(allegedNum) {\n  if (typeof allegedNum === 'bigint') {\n    if (allegedNum < 0) {\n      throw new RangeError(`${allegedNum} is negative`);\n    }\n\n    return allegedNum;\n  }\n\n  if (typeof allegedNum === 'number') {\n    if (!Number.isSafeInteger(allegedNum)) {\n      throw new RangeError(`${allegedNum} not a safe integer`);\n    }\n\n    if (allegedNum < 0) {\n      throw new RangeError(`${allegedNum} is negative`);\n    }\n\n    return BigInt(allegedNum);\n  }\n\n  throw new TypeError(`${allegedNum} is a ${typeof allegedNum} but must be a bigint or a number`);\n}\n\nexport { isNat, Nat };","map":{"version":3,"names":["isNat","allegedNum","Number","isSafeInteger","Nat","RangeError","BigInt","TypeError"],"sources":["/Users/carlostrigoseguin/Documents/KRYHA/agoric/character-builder-repo/ui/node_modules/@endo/nat/src/index.js"],"sourcesContent":["// Copyright (C) 2011 Google Inc.\n// Copyright (C) 2018 Agoric\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @ts-check\n\n/**\n * Is `allegedNum` a number in the [contiguous range of exactly and\n * unambiguously\n * representable](https://esdiscuss.org/topic/more-numeric-constants-please-especially-epsilon#content-14)\n *  natural numbers (non-negative integers)?\n *\n * To qualify `allegedNum` must either be a\n * non-negative `bigint`, or a non-negative `number` representing an integer\n * within range of [integers safely representable in\n * floating point](https://tc39.es/ecma262/#sec-number.issafeinteger).\n *\n * @param {unknown} allegedNum\n * @returns {boolean}\n */\nfunction isNat(allegedNum) {\n  if (typeof allegedNum === 'bigint') {\n    return allegedNum >= 0;\n  }\n  if (typeof allegedNum !== 'number') {\n    return false;\n  }\n\n  return Number.isSafeInteger(allegedNum) && allegedNum >= 0;\n}\n\n/**\n * If `allegedNumber` passes the `isNat` test, then return it as a bigint.\n * Otherwise throw an appropriate error.\n *\n * If `allegedNum` is neither a bigint nor a number, `Nat` throws a `TypeError`.\n * Otherwise, if it is not a [safely\n * representable](https://esdiscuss.org/topic/more-numeric-constants-please-especially-epsilon#content-14)\n * non-negative integer, `Nat` throws a `RangeError`.\n * Otherwise, it is converted to a bigint if necessary and returned.\n *\n * @param {unknown} allegedNum\n * @returns {bigint}\n */\nfunction Nat(allegedNum) {\n  if (typeof allegedNum === 'bigint') {\n    if (allegedNum < 0) {\n      throw new RangeError(`${allegedNum} is negative`);\n    }\n    return allegedNum;\n  }\n\n  if (typeof allegedNum === 'number') {\n    if (!Number.isSafeInteger(allegedNum)) {\n      throw new RangeError(`${allegedNum} not a safe integer`);\n    }\n    if (allegedNum < 0) {\n      throw new RangeError(`${allegedNum} is negative`);\n    }\n    return BigInt(allegedNum);\n  }\n\n  throw new TypeError(\n    `${allegedNum} is a ${typeof allegedNum} but must be a bigint or a number`,\n  );\n}\n\nexport { isNat, Nat };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,KAAT,CAAeC,UAAf,EAA2B;EACzB,IAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;IAClC,OAAOA,UAAU,IAAI,CAArB;EACD;;EACD,IAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;IAClC,OAAO,KAAP;EACD;;EAED,OAAOC,MAAM,CAACC,aAAP,CAAqBF,UAArB,KAAoCA,UAAU,IAAI,CAAzD;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,GAAT,CAAaH,UAAb,EAAyB;EACvB,IAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;IAClC,IAAIA,UAAU,GAAG,CAAjB,EAAoB;MAClB,MAAM,IAAII,UAAJ,CAAgB,GAAEJ,UAAW,cAA7B,CAAN;IACD;;IACD,OAAOA,UAAP;EACD;;EAED,IAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;IAClC,IAAI,CAACC,MAAM,CAACC,aAAP,CAAqBF,UAArB,CAAL,EAAuC;MACrC,MAAM,IAAII,UAAJ,CAAgB,GAAEJ,UAAW,qBAA7B,CAAN;IACD;;IACD,IAAIA,UAAU,GAAG,CAAjB,EAAoB;MAClB,MAAM,IAAII,UAAJ,CAAgB,GAAEJ,UAAW,cAA7B,CAAN;IACD;;IACD,OAAOK,MAAM,CAACL,UAAD,CAAb;EACD;;EAED,MAAM,IAAIM,SAAJ,CACH,GAAEN,UAAW,SAAQ,OAAOA,UAAW,mCADpC,CAAN;AAGD;;AAED,SAASD,KAAT,EAAgBI,GAAhB"},"metadata":{},"sourceType":"module"}