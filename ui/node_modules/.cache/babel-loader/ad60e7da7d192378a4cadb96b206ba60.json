{"ast":null,"code":"/// <reference types=\"ses\">\nimport { TypeError, arrayPush, create, defineProperties, getOwnPropertyDescriptors } from './commons.js';\nimport { evadeHtmlCommentTest, evadeImportExpressionTest, rejectSomeDirectEvalExpressions } from './transforms.js';\nimport { makeSafeEvaluator } from './make-safe-evaluator.js';\nexport const provideCompartmentEvaluator = (compartmentFields, options) => {\n  const {\n    sloppyGlobalsMode = false,\n    __moduleShimLexicals__ = undefined\n  } = options;\n  let safeEvaluate;\n\n  if (__moduleShimLexicals__ === undefined && !sloppyGlobalsMode) {\n    ({\n      safeEvaluate\n    } = compartmentFields);\n  } else {\n    // The scope proxy or global lexicals are different from the\n    // shared evaluator so we need to build a new one\n    let {\n      globalTransforms\n    } = compartmentFields;\n    const {\n      globalObject,\n      globalLexicals,\n      knownScopeProxies\n    } = compartmentFields;\n    let localObject = globalLexicals;\n\n    if (__moduleShimLexicals__ !== undefined) {\n      // When using `evaluate` for ESM modules, as should only occur from the\n      // module-shim's module-instance.js, we do not reveal the SES-shim's\n      // module-to-program translation, as this is not standardizable behavior.\n      // However, the `localTransforms` will come from the `__shimTransforms__`\n      // Compartment option in this case, which is a non-standardizable escape\n      // hatch so programs designed specifically for the SES-shim\n      // implementation may opt-in to use the same transforms for `evaluate`\n      // and `import`, at the expense of being tightly coupled to SES-shim.\n      globalTransforms = undefined;\n      localObject = create(null, getOwnPropertyDescriptors(globalLexicals));\n      defineProperties(localObject, getOwnPropertyDescriptors(__moduleShimLexicals__));\n    }\n\n    ({\n      safeEvaluate\n    } = makeSafeEvaluator({\n      globalObject,\n      globalLexicals: localObject,\n      globalTransforms,\n      sloppyGlobalsMode,\n      knownScopeProxies\n    }));\n  }\n\n  return {\n    safeEvaluate\n  };\n};\nexport const compartmentEvaluate = (compartmentFields, source, options) => {\n  // Perform this check first to avoid unecessary sanitizing.\n  // TODO Maybe relax string check and coerce instead:\n  // https://github.com/tc39/proposal-dynamic-code-brand-checks\n  if (typeof source !== 'string') {\n    throw new TypeError('first argument of evaluate() must be a string');\n  } // Extract options, and shallow-clone transforms.\n\n\n  const {\n    transforms = [],\n    __evadeHtmlCommentTest__ = false,\n    __evadeImportExpressionTest__ = false,\n    __rejectSomeDirectEvalExpressions__ = true // Note default on\n\n  } = options;\n  const localTransforms = [...transforms];\n\n  if (__evadeHtmlCommentTest__ === true) {\n    arrayPush(localTransforms, evadeHtmlCommentTest);\n  }\n\n  if (__evadeImportExpressionTest__ === true) {\n    arrayPush(localTransforms, evadeImportExpressionTest);\n  }\n\n  if (__rejectSomeDirectEvalExpressions__ === true) {\n    arrayPush(localTransforms, rejectSomeDirectEvalExpressions);\n  }\n\n  const {\n    safeEvaluate\n  } = provideCompartmentEvaluator(compartmentFields, options);\n  return safeEvaluate(source, {\n    localTransforms\n  });\n};","map":{"version":3,"names":["TypeError","arrayPush","create","defineProperties","getOwnPropertyDescriptors","evadeHtmlCommentTest","evadeImportExpressionTest","rejectSomeDirectEvalExpressions","makeSafeEvaluator","provideCompartmentEvaluator","compartmentFields","options","sloppyGlobalsMode","__moduleShimLexicals__","undefined","safeEvaluate","globalTransforms","globalObject","globalLexicals","knownScopeProxies","localObject","compartmentEvaluate","source","transforms","__evadeHtmlCommentTest__","__evadeImportExpressionTest__","__rejectSomeDirectEvalExpressions__","localTransforms"],"sources":["/Users/carlostrigoseguin/Documents/KRYHA/agoric/character-builder-repo/ui/node_modules/ses/src/compartment-evaluate.js"],"sourcesContent":["/// <reference types=\"ses\">\nimport {\n  TypeError,\n  arrayPush,\n  create,\n  defineProperties,\n  getOwnPropertyDescriptors,\n} from './commons.js';\nimport {\n  evadeHtmlCommentTest,\n  evadeImportExpressionTest,\n  rejectSomeDirectEvalExpressions,\n} from './transforms.js';\nimport { makeSafeEvaluator } from './make-safe-evaluator.js';\n\nexport const provideCompartmentEvaluator = (compartmentFields, options) => {\n  const {\n    sloppyGlobalsMode = false,\n    __moduleShimLexicals__ = undefined,\n  } = options;\n\n  let safeEvaluate;\n\n  if (__moduleShimLexicals__ === undefined && !sloppyGlobalsMode) {\n    ({ safeEvaluate } = compartmentFields);\n  } else {\n    // The scope proxy or global lexicals are different from the\n    // shared evaluator so we need to build a new one\n\n    let { globalTransforms } = compartmentFields;\n    const {\n      globalObject,\n      globalLexicals,\n      knownScopeProxies,\n    } = compartmentFields;\n\n    let localObject = globalLexicals;\n    if (__moduleShimLexicals__ !== undefined) {\n      // When using `evaluate` for ESM modules, as should only occur from the\n      // module-shim's module-instance.js, we do not reveal the SES-shim's\n      // module-to-program translation, as this is not standardizable behavior.\n      // However, the `localTransforms` will come from the `__shimTransforms__`\n      // Compartment option in this case, which is a non-standardizable escape\n      // hatch so programs designed specifically for the SES-shim\n      // implementation may opt-in to use the same transforms for `evaluate`\n      // and `import`, at the expense of being tightly coupled to SES-shim.\n      globalTransforms = undefined;\n\n      localObject = create(null, getOwnPropertyDescriptors(globalLexicals));\n      defineProperties(\n        localObject,\n        getOwnPropertyDescriptors(__moduleShimLexicals__),\n      );\n    }\n\n    ({ safeEvaluate } = makeSafeEvaluator({\n      globalObject,\n      globalLexicals: localObject,\n      globalTransforms,\n      sloppyGlobalsMode,\n      knownScopeProxies,\n    }));\n  }\n\n  return { safeEvaluate };\n};\n\nexport const compartmentEvaluate = (compartmentFields, source, options) => {\n  // Perform this check first to avoid unecessary sanitizing.\n  // TODO Maybe relax string check and coerce instead:\n  // https://github.com/tc39/proposal-dynamic-code-brand-checks\n  if (typeof source !== 'string') {\n    throw new TypeError('first argument of evaluate() must be a string');\n  }\n\n  // Extract options, and shallow-clone transforms.\n  const {\n    transforms = [],\n    __evadeHtmlCommentTest__ = false,\n    __evadeImportExpressionTest__ = false,\n    __rejectSomeDirectEvalExpressions__ = true, // Note default on\n  } = options;\n  const localTransforms = [...transforms];\n  if (__evadeHtmlCommentTest__ === true) {\n    arrayPush(localTransforms, evadeHtmlCommentTest);\n  }\n  if (__evadeImportExpressionTest__ === true) {\n    arrayPush(localTransforms, evadeImportExpressionTest);\n  }\n  if (__rejectSomeDirectEvalExpressions__ === true) {\n    arrayPush(localTransforms, rejectSomeDirectEvalExpressions);\n  }\n\n  const { safeEvaluate } = provideCompartmentEvaluator(\n    compartmentFields,\n    options,\n  );\n\n  return safeEvaluate(source, {\n    localTransforms,\n  });\n};\n"],"mappings":"AAAA;AACA,SACEA,SADF,EAEEC,SAFF,EAGEC,MAHF,EAIEC,gBAJF,EAKEC,yBALF,QAMO,cANP;AAOA,SACEC,oBADF,EAEEC,yBAFF,EAGEC,+BAHF,QAIO,iBAJP;AAKA,SAASC,iBAAT,QAAkC,0BAAlC;AAEA,OAAO,MAAMC,2BAA2B,GAAG,CAACC,iBAAD,EAAoBC,OAApB,KAAgC;EACzE,MAAM;IACJC,iBAAiB,GAAG,KADhB;IAEJC,sBAAsB,GAAGC;EAFrB,IAGFH,OAHJ;EAKA,IAAII,YAAJ;;EAEA,IAAIF,sBAAsB,KAAKC,SAA3B,IAAwC,CAACF,iBAA7C,EAAgE;IAC9D,CAAC;MAAEG;IAAF,IAAmBL,iBAApB;EACD,CAFD,MAEO;IACL;IACA;IAEA,IAAI;MAAEM;IAAF,IAAuBN,iBAA3B;IACA,MAAM;MACJO,YADI;MAEJC,cAFI;MAGJC;IAHI,IAIFT,iBAJJ;IAMA,IAAIU,WAAW,GAAGF,cAAlB;;IACA,IAAIL,sBAAsB,KAAKC,SAA/B,EAA0C;MACxC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAE,gBAAgB,GAAGF,SAAnB;MAEAM,WAAW,GAAGlB,MAAM,CAAC,IAAD,EAAOE,yBAAyB,CAACc,cAAD,CAAhC,CAApB;MACAf,gBAAgB,CACdiB,WADc,EAEdhB,yBAAyB,CAACS,sBAAD,CAFX,CAAhB;IAID;;IAED,CAAC;MAAEE;IAAF,IAAmBP,iBAAiB,CAAC;MACpCS,YADoC;MAEpCC,cAAc,EAAEE,WAFoB;MAGpCJ,gBAHoC;MAIpCJ,iBAJoC;MAKpCO;IALoC,CAAD,CAArC;EAOD;;EAED,OAAO;IAAEJ;EAAF,CAAP;AACD,CAlDM;AAoDP,OAAO,MAAMM,mBAAmB,GAAG,CAACX,iBAAD,EAAoBY,MAApB,EAA4BX,OAA5B,KAAwC;EACzE;EACA;EACA;EACA,IAAI,OAAOW,MAAP,KAAkB,QAAtB,EAAgC;IAC9B,MAAM,IAAItB,SAAJ,CAAc,+CAAd,CAAN;EACD,CANwE,CAQzE;;;EACA,MAAM;IACJuB,UAAU,GAAG,EADT;IAEJC,wBAAwB,GAAG,KAFvB;IAGJC,6BAA6B,GAAG,KAH5B;IAIJC,mCAAmC,GAAG,IAJlC,CAIwC;;EAJxC,IAKFf,OALJ;EAMA,MAAMgB,eAAe,GAAG,CAAC,GAAGJ,UAAJ,CAAxB;;EACA,IAAIC,wBAAwB,KAAK,IAAjC,EAAuC;IACrCvB,SAAS,CAAC0B,eAAD,EAAkBtB,oBAAlB,CAAT;EACD;;EACD,IAAIoB,6BAA6B,KAAK,IAAtC,EAA4C;IAC1CxB,SAAS,CAAC0B,eAAD,EAAkBrB,yBAAlB,CAAT;EACD;;EACD,IAAIoB,mCAAmC,KAAK,IAA5C,EAAkD;IAChDzB,SAAS,CAAC0B,eAAD,EAAkBpB,+BAAlB,CAAT;EACD;;EAED,MAAM;IAAEQ;EAAF,IAAmBN,2BAA2B,CAClDC,iBADkD,EAElDC,OAFkD,CAApD;EAKA,OAAOI,YAAY,CAACO,MAAD,EAAS;IAC1BK;EAD0B,CAAT,CAAnB;AAGD,CAlCM"},"metadata":{},"sourceType":"module"}