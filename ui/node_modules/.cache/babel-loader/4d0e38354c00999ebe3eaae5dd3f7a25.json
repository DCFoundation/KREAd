{"ast":null,"code":"import { WeakMap, WeakSet, apply, arrayFilter, arrayJoin, arrayMap, arraySlice, create, defineProperties, fromEntries, reflectSet, regexpExec, regexpTest, weakmapGet, weakmapHas, weakmapSet, weaksetAdd, weaksetHas } from '../commons.js'; // Whitelist names from https://v8.dev/docs/stack-trace-api\n// Whitelisting only the names used by error-stack-shim/src/v8StackFrames\n// callSiteToFrame to shim the error stack proposal.\n\nconst safeV8CallSiteMethodNames = [// suppress 'getThis' definitely\n'getTypeName', // suppress 'getFunction' definitely\n'getFunctionName', 'getMethodName', 'getFileName', 'getLineNumber', 'getColumnNumber', 'getEvalOrigin', 'isToplevel', 'isEval', 'isNative', 'isConstructor', 'isAsync', // suppress 'isPromiseAll' for now\n// suppress 'getPromiseIndex' for now\n// Additional names found by experiment, absent from\n// https://v8.dev/docs/stack-trace-api\n'getPosition', 'getScriptNameOrSourceURL', 'toString' // TODO replace to use only whitelisted info\n]; // TODO this is a ridiculously expensive way to attenuate callsites.\n// Before that matters, we should switch to a reasonable representation.\n\nconst safeV8CallSiteFacet = callSite => {\n  const methodEntry = name => {\n    const method = callSite[name];\n    return [name, () => apply(method, callSite, [])];\n  };\n\n  const o = fromEntries(arrayMap(safeV8CallSiteMethodNames, methodEntry));\n  return create(o, {});\n};\n\nconst safeV8SST = sst => arrayMap(sst, safeV8CallSiteFacet); // If it has `/node_modules/` anywhere in it, on Node it is likely\n// to be a dependent package of the current package, and so to\n// be an infrastructure frame to be dropped from concise stack traces.\n\n\nconst FILENAME_NODE_DEPENDENTS_CENSOR = /\\/node_modules\\//; // If it begins with `internal/` or `node:internal` then it is likely\n// part of the node infrustructre itself, to be dropped from concise\n// stack traces.\n\nconst FILENAME_NODE_INTERNALS_CENSOR = /^(?:node:)?internal\\//; // Frames within the `assert.js` package should be dropped from\n// concise stack traces, as these are just steps towards creating the\n// error object in question.\n\nconst FILENAME_ASSERT_CENSOR = /\\/packages\\/ses\\/src\\/error\\/assert.js$/; // Frames within the `eventual-send` shim should be dropped so that concise\n// deep stacks omit the internals of the eventual-sending mechanism causing\n// asynchronous messages to be sent.\n// Note that the eventual-send package will move from agoric-sdk to\n// Endo, so this rule will be of general interest.\n\nconst FILENAME_EVENTUAL_SEND_CENSOR = /\\/packages\\/eventual-send\\/src\\//; // Any stack frame whose `fileName` matches any of these censor patterns\n// will be omitted from concise stacks.\n// TODO Enable users to configure FILENAME_CENSORS via `lockdown` options.\n\nconst FILENAME_CENSORS = [FILENAME_NODE_DEPENDENTS_CENSOR, FILENAME_NODE_INTERNALS_CENSOR, FILENAME_ASSERT_CENSOR, FILENAME_EVENTUAL_SEND_CENSOR]; // Should a stack frame with this as its fileName be included in a concise\n// stack trace?\n// Exported only so it can be unit tested.\n// TODO Move so that it applies not just to v8.\n\nexport const filterFileName = fileName => {\n  if (!fileName) {\n    // Stack frames with no fileName should appear in concise stack traces.\n    return true;\n  }\n\n  for (const filter of FILENAME_CENSORS) {\n    if (regexpTest(filter, fileName)) {\n      return false;\n    }\n  }\n\n  return true;\n}; // The ad-hoc rule of the current pattern is that any likely-file-path or\n// likely url-path prefix, ending in a `/.../` should get dropped.\n// Anything to the left of the likely path text is kept.\n// Everything to the right of `/.../` is kept. Thus\n// `'Object.bar (/vat-v1/.../eventual-send/test/test-deep-send.js:13:21)'`\n// simplifies to\n// `'Object.bar (eventual-send/test/test-deep-send.js:13:21)'`.\n//\n// See thread starting at\n// https://github.com/Agoric/agoric-sdk/issues/2326#issuecomment-773020389\n\nconst CALLSITE_ELLIPSES_PATTERN = /^((?:.*[( ])?)[:/\\w_-]*\\/\\.\\.\\.\\/(.+)$/; // The ad-hoc rule of the current pattern is that any likely-file-path or\n// likely url-path prefix, ending in a `/` and prior to `package/` should get\n// dropped.\n// Anything to the left of the likely path prefix text is kept. `package/` and\n// everything to its right is kept. Thus\n// `'Object.bar (/Users/markmiller/src/ongithub/agoric/agoric-sdk/packages/eventual-send/test/test-deep-send.js:13:21)'`\n// simplifies to\n// `'Object.bar (packages/eventual-send/test/test-deep-send.js:13:21)'`.\n// Note that `/packages/` is a convention for monorepos encouraged by\n// lerna.\n\nconst CALLSITE_PACKAGES_PATTERN = /^((?:.*[( ])?)[:/\\w_-]*\\/(packages\\/.+)$/; // The use of these callSite patterns below assumes that any match will bind\n// capture groups containing the parts of the original string we want\n// to keep. The parts outside those capture groups will be dropped from concise\n// stacks.\n// TODO Enable users to configure CALLSITE_PATTERNS via `lockdown` options.\n\nconst CALLSITE_PATTERNS = [CALLSITE_ELLIPSES_PATTERN, CALLSITE_PACKAGES_PATTERN]; // For a stack frame that should be included in a concise stack trace, if\n// `callSiteString` is the original stringified stack frame, return the\n// possibly-shorter stringified stack frame that should be shown instead.\n// Exported only so it can be unit tested.\n// TODO Move so that it applies not just to v8.\n\nexport const shortenCallSiteString = callSiteString => {\n  for (const filter of CALLSITE_PATTERNS) {\n    const match = regexpExec(filter, callSiteString);\n\n    if (match) {\n      return arrayJoin(arraySlice(match, 1), '');\n    }\n  }\n\n  return callSiteString;\n};\nexport const tameV8ErrorConstructor = (OriginalError, InitialError, errorTaming, stackFiltering) => {\n  const originalCaptureStackTrace = OriginalError.captureStackTrace; // const callSiteFilter = _callSite => true;\n\n  const callSiteFilter = callSite => {\n    if (stackFiltering === 'verbose') {\n      return true;\n    } // eslint-disable-next-line @endo/no-polymorphic-call\n\n\n    return filterFileName(callSite.getFileName());\n  };\n\n  const callSiteStringifier = callSite => {\n    let callSiteString = `${callSite}`;\n\n    if (stackFiltering === 'concise') {\n      callSiteString = shortenCallSiteString(callSiteString);\n    }\n\n    return `\\n  at ${callSiteString}`;\n  };\n\n  const stackStringFromSST = (_error, sst) => arrayJoin(arrayMap(arrayFilter(sst, callSiteFilter), callSiteStringifier), ''); // Mapping from error instance to the structured stack trace capturing the\n  // stack for that instance.\n\n\n  const ssts = new WeakMap(); // Use concise methods to obtain named functions without constructors.\n\n  const tamedMethods = {\n    // The optional `optFn` argument is for cutting off the bottom of\n    // the stack --- for capturing the stack only above the topmost\n    // call to that function. Since this isn't the \"real\" captureStackTrace\n    // but instead calls the real one, if no other cutoff is provided,\n    // we cut this one off.\n    captureStackTrace(error) {\n      let optFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : tamedMethods.captureStackTrace;\n\n      if (typeof originalCaptureStackTrace === 'function') {\n        // OriginalError.captureStackTrace is only on v8\n        apply(originalCaptureStackTrace, OriginalError, [error, optFn]);\n        return;\n      }\n\n      reflectSet(error, 'stack', '');\n    },\n\n    // Shim of proposed special power, to reside by default only\n    // in the start compartment, for getting the stack traceback\n    // string associated with an error.\n    // See https://tc39.es/proposal-error-stacks/\n    getStackString(error) {\n      if (!weakmapHas(ssts, error)) {\n        // eslint-disable-next-line no-void\n        void error.stack;\n      }\n\n      const sst = weakmapGet(ssts, error);\n\n      if (!sst) {\n        return '';\n      }\n\n      return stackStringFromSST(error, sst);\n    },\n\n    prepareStackTrace(error, sst) {\n      weakmapSet(ssts, error, sst);\n\n      if (errorTaming === 'unsafe') {\n        const stackString = stackStringFromSST(error, sst);\n        return `${error}${stackString}`;\n      }\n\n      return '';\n    }\n\n  }; // A prepareFn is a prepareStackTrace function.\n  // An sst is a `structuredStackTrace`, which is an array of\n  // callsites.\n  // A user prepareFn is a prepareFn defined by a client of this API,\n  // and provided by assigning to `Error.prepareStackTrace`.\n  // A user prepareFn should only receive an attenuated sst, which\n  // is an array of attenuated callsites.\n  // A system prepareFn is the prepareFn created by this module to\n  // be installed on the real `Error` constructor, to receive\n  // an original sst, i.e., an array of unattenuated callsites.\n  // An input prepareFn is a function the user assigns to\n  // `Error.prepareStackTrace`, which might be a user prepareFn or\n  // a system prepareFn previously obtained by reading\n  // `Error.prepareStackTrace`.\n\n  const defaultPrepareFn = tamedMethods.prepareStackTrace;\n  OriginalError.prepareStackTrace = defaultPrepareFn; // A weakset branding some functions as system prepareFns, all of which\n  // must be defined by this module, since they can receive an\n  // unattenuated sst.\n\n  const systemPrepareFnSet = new WeakSet([defaultPrepareFn]);\n\n  const systemPrepareFnFor = inputPrepareFn => {\n    if (weaksetHas(systemPrepareFnSet, inputPrepareFn)) {\n      return inputPrepareFn;\n    } // Use concise methods to obtain named functions without constructors.\n\n\n    const systemMethods = {\n      prepareStackTrace(error, sst) {\n        weakmapSet(ssts, error, sst);\n        return inputPrepareFn(error, safeV8SST(sst));\n      }\n\n    };\n    weaksetAdd(systemPrepareFnSet, systemMethods.prepareStackTrace);\n    return systemMethods.prepareStackTrace;\n  }; // Note `stackTraceLimit` accessor already defined by\n  // tame-error-constructor.js\n\n\n  defineProperties(InitialError, {\n    captureStackTrace: {\n      value: tamedMethods.captureStackTrace,\n      writable: true,\n      enumerable: false,\n      configurable: true\n    },\n    prepareStackTrace: {\n      get() {\n        return OriginalError.prepareStackTrace;\n      },\n\n      set(inputPrepareStackTraceFn) {\n        if (typeof inputPrepareStackTraceFn === 'function') {\n          const systemPrepareFn = systemPrepareFnFor(inputPrepareStackTraceFn);\n          OriginalError.prepareStackTrace = systemPrepareFn;\n        } else {\n          OriginalError.prepareStackTrace = defaultPrepareFn;\n        }\n      },\n\n      enumerable: false,\n      configurable: true\n    }\n  });\n  return tamedMethods.getStackString;\n};","map":{"version":3,"names":["WeakMap","WeakSet","apply","arrayFilter","arrayJoin","arrayMap","arraySlice","create","defineProperties","fromEntries","reflectSet","regexpExec","regexpTest","weakmapGet","weakmapHas","weakmapSet","weaksetAdd","weaksetHas","safeV8CallSiteMethodNames","safeV8CallSiteFacet","callSite","methodEntry","name","method","o","safeV8SST","sst","FILENAME_NODE_DEPENDENTS_CENSOR","FILENAME_NODE_INTERNALS_CENSOR","FILENAME_ASSERT_CENSOR","FILENAME_EVENTUAL_SEND_CENSOR","FILENAME_CENSORS","filterFileName","fileName","filter","CALLSITE_ELLIPSES_PATTERN","CALLSITE_PACKAGES_PATTERN","CALLSITE_PATTERNS","shortenCallSiteString","callSiteString","match","tameV8ErrorConstructor","OriginalError","InitialError","errorTaming","stackFiltering","originalCaptureStackTrace","captureStackTrace","callSiteFilter","getFileName","callSiteStringifier","stackStringFromSST","_error","ssts","tamedMethods","error","optFn","getStackString","stack","prepareStackTrace","stackString","defaultPrepareFn","systemPrepareFnSet","systemPrepareFnFor","inputPrepareFn","systemMethods","value","writable","enumerable","configurable","get","set","inputPrepareStackTraceFn","systemPrepareFn"],"sources":["/Users/carlostrigoseguin/Documents/KRYHA/agoric/character-builder-repo/ui/node_modules/ses/src/error/tame-v8-error-constructor.js"],"sourcesContent":["import {\n  WeakMap,\n  WeakSet,\n  apply,\n  arrayFilter,\n  arrayJoin,\n  arrayMap,\n  arraySlice,\n  create,\n  defineProperties,\n  fromEntries,\n  reflectSet,\n  regexpExec,\n  regexpTest,\n  weakmapGet,\n  weakmapHas,\n  weakmapSet,\n  weaksetAdd,\n  weaksetHas,\n} from '../commons.js';\n\n// Whitelist names from https://v8.dev/docs/stack-trace-api\n// Whitelisting only the names used by error-stack-shim/src/v8StackFrames\n// callSiteToFrame to shim the error stack proposal.\nconst safeV8CallSiteMethodNames = [\n  // suppress 'getThis' definitely\n  'getTypeName',\n  // suppress 'getFunction' definitely\n  'getFunctionName',\n  'getMethodName',\n  'getFileName',\n  'getLineNumber',\n  'getColumnNumber',\n  'getEvalOrigin',\n  'isToplevel',\n  'isEval',\n  'isNative',\n  'isConstructor',\n  'isAsync',\n  // suppress 'isPromiseAll' for now\n  // suppress 'getPromiseIndex' for now\n\n  // Additional names found by experiment, absent from\n  // https://v8.dev/docs/stack-trace-api\n  'getPosition',\n  'getScriptNameOrSourceURL',\n\n  'toString', // TODO replace to use only whitelisted info\n];\n\n// TODO this is a ridiculously expensive way to attenuate callsites.\n// Before that matters, we should switch to a reasonable representation.\nconst safeV8CallSiteFacet = callSite => {\n  const methodEntry = name => {\n    const method = callSite[name];\n    return [name, () => apply(method, callSite, [])];\n  };\n  const o = fromEntries(arrayMap(safeV8CallSiteMethodNames, methodEntry));\n  return create(o, {});\n};\n\nconst safeV8SST = sst => arrayMap(sst, safeV8CallSiteFacet);\n\n// If it has `/node_modules/` anywhere in it, on Node it is likely\n// to be a dependent package of the current package, and so to\n// be an infrastructure frame to be dropped from concise stack traces.\nconst FILENAME_NODE_DEPENDENTS_CENSOR = /\\/node_modules\\//;\n\n// If it begins with `internal/` or `node:internal` then it is likely\n// part of the node infrustructre itself, to be dropped from concise\n// stack traces.\nconst FILENAME_NODE_INTERNALS_CENSOR = /^(?:node:)?internal\\//;\n\n// Frames within the `assert.js` package should be dropped from\n// concise stack traces, as these are just steps towards creating the\n// error object in question.\nconst FILENAME_ASSERT_CENSOR = /\\/packages\\/ses\\/src\\/error\\/assert.js$/;\n\n// Frames within the `eventual-send` shim should be dropped so that concise\n// deep stacks omit the internals of the eventual-sending mechanism causing\n// asynchronous messages to be sent.\n// Note that the eventual-send package will move from agoric-sdk to\n// Endo, so this rule will be of general interest.\nconst FILENAME_EVENTUAL_SEND_CENSOR = /\\/packages\\/eventual-send\\/src\\//;\n\n// Any stack frame whose `fileName` matches any of these censor patterns\n// will be omitted from concise stacks.\n// TODO Enable users to configure FILENAME_CENSORS via `lockdown` options.\nconst FILENAME_CENSORS = [\n  FILENAME_NODE_DEPENDENTS_CENSOR,\n  FILENAME_NODE_INTERNALS_CENSOR,\n  FILENAME_ASSERT_CENSOR,\n  FILENAME_EVENTUAL_SEND_CENSOR,\n];\n\n// Should a stack frame with this as its fileName be included in a concise\n// stack trace?\n// Exported only so it can be unit tested.\n// TODO Move so that it applies not just to v8.\nexport const filterFileName = fileName => {\n  if (!fileName) {\n    // Stack frames with no fileName should appear in concise stack traces.\n    return true;\n  }\n  for (const filter of FILENAME_CENSORS) {\n    if (regexpTest(filter, fileName)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// The ad-hoc rule of the current pattern is that any likely-file-path or\n// likely url-path prefix, ending in a `/.../` should get dropped.\n// Anything to the left of the likely path text is kept.\n// Everything to the right of `/.../` is kept. Thus\n// `'Object.bar (/vat-v1/.../eventual-send/test/test-deep-send.js:13:21)'`\n// simplifies to\n// `'Object.bar (eventual-send/test/test-deep-send.js:13:21)'`.\n//\n// See thread starting at\n// https://github.com/Agoric/agoric-sdk/issues/2326#issuecomment-773020389\nconst CALLSITE_ELLIPSES_PATTERN = /^((?:.*[( ])?)[:/\\w_-]*\\/\\.\\.\\.\\/(.+)$/;\n\n// The ad-hoc rule of the current pattern is that any likely-file-path or\n// likely url-path prefix, ending in a `/` and prior to `package/` should get\n// dropped.\n// Anything to the left of the likely path prefix text is kept. `package/` and\n// everything to its right is kept. Thus\n// `'Object.bar (/Users/markmiller/src/ongithub/agoric/agoric-sdk/packages/eventual-send/test/test-deep-send.js:13:21)'`\n// simplifies to\n// `'Object.bar (packages/eventual-send/test/test-deep-send.js:13:21)'`.\n// Note that `/packages/` is a convention for monorepos encouraged by\n// lerna.\nconst CALLSITE_PACKAGES_PATTERN = /^((?:.*[( ])?)[:/\\w_-]*\\/(packages\\/.+)$/;\n\n// The use of these callSite patterns below assumes that any match will bind\n// capture groups containing the parts of the original string we want\n// to keep. The parts outside those capture groups will be dropped from concise\n// stacks.\n// TODO Enable users to configure CALLSITE_PATTERNS via `lockdown` options.\nconst CALLSITE_PATTERNS = [\n  CALLSITE_ELLIPSES_PATTERN,\n  CALLSITE_PACKAGES_PATTERN,\n];\n\n// For a stack frame that should be included in a concise stack trace, if\n// `callSiteString` is the original stringified stack frame, return the\n// possibly-shorter stringified stack frame that should be shown instead.\n// Exported only so it can be unit tested.\n// TODO Move so that it applies not just to v8.\nexport const shortenCallSiteString = callSiteString => {\n  for (const filter of CALLSITE_PATTERNS) {\n    const match = regexpExec(filter, callSiteString);\n    if (match) {\n      return arrayJoin(arraySlice(match, 1), '');\n    }\n  }\n  return callSiteString;\n};\n\nexport const tameV8ErrorConstructor = (\n  OriginalError,\n  InitialError,\n  errorTaming,\n  stackFiltering,\n) => {\n  const originalCaptureStackTrace = OriginalError.captureStackTrace;\n\n  // const callSiteFilter = _callSite => true;\n  const callSiteFilter = callSite => {\n    if (stackFiltering === 'verbose') {\n      return true;\n    }\n    // eslint-disable-next-line @endo/no-polymorphic-call\n    return filterFileName(callSite.getFileName());\n  };\n\n  const callSiteStringifier = callSite => {\n    let callSiteString = `${callSite}`;\n    if (stackFiltering === 'concise') {\n      callSiteString = shortenCallSiteString(callSiteString);\n    }\n    return `\\n  at ${callSiteString}`;\n  };\n\n  const stackStringFromSST = (_error, sst) =>\n    arrayJoin(\n      arrayMap(arrayFilter(sst, callSiteFilter), callSiteStringifier),\n      '',\n    );\n\n  // Mapping from error instance to the structured stack trace capturing the\n  // stack for that instance.\n  const ssts = new WeakMap();\n\n  // Use concise methods to obtain named functions without constructors.\n  const tamedMethods = {\n    // The optional `optFn` argument is for cutting off the bottom of\n    // the stack --- for capturing the stack only above the topmost\n    // call to that function. Since this isn't the \"real\" captureStackTrace\n    // but instead calls the real one, if no other cutoff is provided,\n    // we cut this one off.\n    captureStackTrace(error, optFn = tamedMethods.captureStackTrace) {\n      if (typeof originalCaptureStackTrace === 'function') {\n        // OriginalError.captureStackTrace is only on v8\n        apply(originalCaptureStackTrace, OriginalError, [error, optFn]);\n        return;\n      }\n      reflectSet(error, 'stack', '');\n    },\n    // Shim of proposed special power, to reside by default only\n    // in the start compartment, for getting the stack traceback\n    // string associated with an error.\n    // See https://tc39.es/proposal-error-stacks/\n    getStackString(error) {\n      if (!weakmapHas(ssts, error)) {\n        // eslint-disable-next-line no-void\n        void error.stack;\n      }\n      const sst = weakmapGet(ssts, error);\n      if (!sst) {\n        return '';\n      }\n      return stackStringFromSST(error, sst);\n    },\n    prepareStackTrace(error, sst) {\n      weakmapSet(ssts, error, sst);\n      if (errorTaming === 'unsafe') {\n        const stackString = stackStringFromSST(error, sst);\n        return `${error}${stackString}`;\n      }\n      return '';\n    },\n  };\n\n  // A prepareFn is a prepareStackTrace function.\n  // An sst is a `structuredStackTrace`, which is an array of\n  // callsites.\n  // A user prepareFn is a prepareFn defined by a client of this API,\n  // and provided by assigning to `Error.prepareStackTrace`.\n  // A user prepareFn should only receive an attenuated sst, which\n  // is an array of attenuated callsites.\n  // A system prepareFn is the prepareFn created by this module to\n  // be installed on the real `Error` constructor, to receive\n  // an original sst, i.e., an array of unattenuated callsites.\n  // An input prepareFn is a function the user assigns to\n  // `Error.prepareStackTrace`, which might be a user prepareFn or\n  // a system prepareFn previously obtained by reading\n  // `Error.prepareStackTrace`.\n\n  const defaultPrepareFn = tamedMethods.prepareStackTrace;\n\n  OriginalError.prepareStackTrace = defaultPrepareFn;\n\n  // A weakset branding some functions as system prepareFns, all of which\n  // must be defined by this module, since they can receive an\n  // unattenuated sst.\n  const systemPrepareFnSet = new WeakSet([defaultPrepareFn]);\n\n  const systemPrepareFnFor = inputPrepareFn => {\n    if (weaksetHas(systemPrepareFnSet, inputPrepareFn)) {\n      return inputPrepareFn;\n    }\n    // Use concise methods to obtain named functions without constructors.\n    const systemMethods = {\n      prepareStackTrace(error, sst) {\n        weakmapSet(ssts, error, sst);\n        return inputPrepareFn(error, safeV8SST(sst));\n      },\n    };\n    weaksetAdd(systemPrepareFnSet, systemMethods.prepareStackTrace);\n    return systemMethods.prepareStackTrace;\n  };\n\n  // Note `stackTraceLimit` accessor already defined by\n  // tame-error-constructor.js\n  defineProperties(InitialError, {\n    captureStackTrace: {\n      value: tamedMethods.captureStackTrace,\n      writable: true,\n      enumerable: false,\n      configurable: true,\n    },\n    prepareStackTrace: {\n      get() {\n        return OriginalError.prepareStackTrace;\n      },\n      set(inputPrepareStackTraceFn) {\n        if (typeof inputPrepareStackTraceFn === 'function') {\n          const systemPrepareFn = systemPrepareFnFor(inputPrepareStackTraceFn);\n          OriginalError.prepareStackTrace = systemPrepareFn;\n        } else {\n          OriginalError.prepareStackTrace = defaultPrepareFn;\n        }\n      },\n      enumerable: false,\n      configurable: true,\n    },\n  });\n\n  return tamedMethods.getStackString;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}