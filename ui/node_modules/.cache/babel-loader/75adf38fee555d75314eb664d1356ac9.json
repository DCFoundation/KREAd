{"ast":null,"code":"/**\n * @file Exports {@code enablements}, a recursively defined\n * JSON record defining the optimum set of intrinsics properties\n * that need to be \"repaired\" before hardening is applied on\n * enviromments subject to the override mistake.\n *\n * @author JF Paradis\n * @author Mark S. Miller\n */\n\n/**\n * <p>Because \"repairing\" replaces data properties with accessors, every\n * time a repaired property is accessed, the associated getter is invoked,\n * which degrades the runtime performance of all code executing in the\n * repaired enviromment, compared to the non-repaired case. In order\n * to maintain performance, we only repair the properties of objects\n * for which hardening causes a breakage of their normal intended usage.\n *\n * There are three unwanted cases:\n * <ul>\n * <li>Overriding properties on objects typically used as records,\n *     namely {@code \"Object\"} and {@code \"Array\"}. In the case of arrays,\n *     the situation is unintentional, a given program might not be aware\n *     that non-numerical properties are stored on the underlying object\n *     instance, not on the array. When an object is typically used as a\n *     map, we repair all of its prototype properties.\n * <li>Overriding properties on objects that provide defaults on their\n *     prototype and that programs typically set using an assignment, such as\n *     {@code \"Error.prototype.message\"} and {@code \"Function.prototype.name\"}\n *     (both default to \"\").\n * <li>Setting-up a prototype chain, where a constructor is set to extend\n *     another one. This is typically set by assignment, for example\n *     {@code \"Child.prototype.constructor = Child\"}, instead of invoking\n *     Object.defineProperty();\n *\n * <p>Each JSON record enumerates the disposition of the properties on\n * some corresponding intrinsic object.\n *\n * <p>For each such record, the values associated with its property\n * names can be:\n * <ul>\n * <li>true, in which case this property is simply repaired. The\n *     value associated with that property is not traversed. For\n * \t   example, {@code \"Function.prototype.name\"} leads to true,\n *     meaning that the {@code \"name\"} property of {@code\n *     \"Function.prototype\"} should be repaired (which is needed\n *     when inheriting from @code{Function} and setting the subclass's\n *     {@code \"prototype.name\"} property). If the property is\n *     already an accessor property, it is not repaired (because\n *     accessors are not subject to the override mistake).\n * <li>\"*\", in which case this property is not repaired but the\n *     value associated with that property are traversed and repaired.\n * <li>Another record, in which case this property is not repaired\n *     and that next record represents the disposition of the object\n *     which is its value. For example,{@code \"FunctionPrototype\"}\n *     leads to another record explaining which properties {@code\n *     Function.prototype} need to be repaired.\n */\n\n/**\n * Minimal enablements when all the code is modern and known not to\n * step into the override mistake, except for the following pervasive\n * cases.\n */\nexport const minEnablements = {\n  '%ObjectPrototype%': {\n    toString: true\n  },\n  '%FunctionPrototype%': {\n    toString: true // set by \"rollup\"\n\n  },\n  '%ErrorPrototype%': {\n    name: true // set by \"precond\", \"ava\", \"node-fetch\"\n\n  }\n};\n/**\n * Moderate enablements are usually good enough for legacy compat.\n */\n\nexport const moderateEnablements = {\n  '%ObjectPrototype%': {\n    toString: true,\n    valueOf: true\n  },\n  '%ArrayPrototype%': {\n    toString: true,\n    push: true // set by \"Google Analytics\"\n\n  },\n  // Function.prototype has no 'prototype' property to enable.\n  // Function instances have their own 'name' and 'length' properties\n  // which are configurable and non-writable. Thus, they are already\n  // non-assignable anyway.\n  '%FunctionPrototype%': {\n    constructor: true,\n    // set by \"regenerator-runtime\"\n    bind: true,\n    // set by \"underscore\", \"express\"\n    toString: true // set by \"rollup\"\n\n  },\n  '%ErrorPrototype%': {\n    constructor: true,\n    // set by \"fast-json-patch\", \"node-fetch\"\n    message: true,\n    name: true,\n    // set by \"precond\", \"ava\", \"node-fetch\", \"node 14\"\n    toString: true // set by \"bluebird\"\n\n  },\n  '%TypeErrorPrototype%': {\n    constructor: true,\n    // set by \"readable-stream\"\n    message: true,\n    // set by \"tape\"\n    name: true // set by \"readable-stream\", \"node 14\"\n\n  },\n  '%SyntaxErrorPrototype%': {\n    message: true,\n    // to match TypeErrorPrototype.message\n    name: true // set by \"node 14\"\n\n  },\n  '%RangeErrorPrototype%': {\n    message: true,\n    // to match TypeErrorPrototype.message\n    name: true // set by \"node 14\"\n\n  },\n  '%URIErrorPrototype%': {\n    message: true,\n    // to match TypeErrorPrototype.message\n    name: true // set by \"node 14\"\n\n  },\n  '%EvalErrorPrototype%': {\n    message: true,\n    // to match TypeErrorPrototype.message\n    name: true // set by \"node 14\"\n\n  },\n  '%ReferenceErrorPrototype%': {\n    message: true,\n    // to match TypeErrorPrototype.message\n    name: true // set by \"node 14\"\n\n  },\n  '%PromisePrototype%': {\n    constructor: true // set by \"core-js\"\n\n  },\n  '%TypedArrayPrototype%': '*',\n  // set by https://github.com/feross/buffer\n  '%Generator%': {\n    constructor: true,\n    name: true,\n    toString: true\n  },\n  '%IteratorPrototype%': {\n    toString: true\n  }\n};\n/**\n * The 'severe' enablement are needed because of issues tracked at\n * https://github.com/endojs/endo/issues/576\n *\n * They are like the `moderate` enablements except for the entries below.\n */\n\nexport const severeEnablements = { ...moderateEnablements,\n\n  /**\n   * Rollup(as used at least by vega) and webpack\n   * (as used at least by regenerator) both turn exports into assignments\n   * to a big `exports` object that inherits directly from\n   * `Object.prototype`.Some of the exported names we've seen include\n   * `hasOwnProperty`, `constructor`, and `toString`. But the strategy used\n   * by rollup and webpack means potentionally turns any exported name\n   * into an assignment rejected by the override mistake.That's why\n   * we take the extreme step of enabling everything on`Object.prototype`.\n   *\n   * In addition, code doing inheritance manually will often override\n   * the `constructor` property on the new prototype by assignment. We've\n   * seen this several times.\n   *\n   * The cost of enabling all these is that they create a miserable debugging\n   * experience. https://github.com/Agoric/agoric-sdk/issues/2324 explains\n   * how it confused the Node console.\n   *\n   * The vscode debugger's object inspector shows the own data properties of\n   * an object, which is typically what you want, but also shows both getter\n   * and setter for every accessor property whether inherited or own.\n   * With the `'*'` setting here, all the properties inherited from\n   * `Object.prototype` are accessors, creating an unusable display as seen\n   * at As explained at\n   * https://github.com/endojs/endo/blob/master/packages/ses/lockdown-options.md#overridetaming-options\n   * Open the triangles at the bottom of that section.\n   */\n  '%ObjectPrototype%': '*',\n\n  /**\n   * The widely used Buffer defined at https://github.com/feross/buffer\n   * on initialization, manually creates the equivalent of a subclass of\n   * `TypedArray`, which it then initializes by assignment. These assignments\n   * include enough of the `TypeArray` methods that here, we just enable\n   * them all.\n   */\n  '%TypedArrayPrototype%': '*'\n};","map":{"version":3,"names":["minEnablements","toString","name","moderateEnablements","valueOf","push","constructor","bind","message","severeEnablements"],"sources":["/Users/carlostrigoseguin/Documents/KRYHA/agoric/character-builder-repo/ui/node_modules/ses/src/enablements.js"],"sourcesContent":["/**\n * @file Exports {@code enablements}, a recursively defined\n * JSON record defining the optimum set of intrinsics properties\n * that need to be \"repaired\" before hardening is applied on\n * enviromments subject to the override mistake.\n *\n * @author JF Paradis\n * @author Mark S. Miller\n */\n\n/**\n * <p>Because \"repairing\" replaces data properties with accessors, every\n * time a repaired property is accessed, the associated getter is invoked,\n * which degrades the runtime performance of all code executing in the\n * repaired enviromment, compared to the non-repaired case. In order\n * to maintain performance, we only repair the properties of objects\n * for which hardening causes a breakage of their normal intended usage.\n *\n * There are three unwanted cases:\n * <ul>\n * <li>Overriding properties on objects typically used as records,\n *     namely {@code \"Object\"} and {@code \"Array\"}. In the case of arrays,\n *     the situation is unintentional, a given program might not be aware\n *     that non-numerical properties are stored on the underlying object\n *     instance, not on the array. When an object is typically used as a\n *     map, we repair all of its prototype properties.\n * <li>Overriding properties on objects that provide defaults on their\n *     prototype and that programs typically set using an assignment, such as\n *     {@code \"Error.prototype.message\"} and {@code \"Function.prototype.name\"}\n *     (both default to \"\").\n * <li>Setting-up a prototype chain, where a constructor is set to extend\n *     another one. This is typically set by assignment, for example\n *     {@code \"Child.prototype.constructor = Child\"}, instead of invoking\n *     Object.defineProperty();\n *\n * <p>Each JSON record enumerates the disposition of the properties on\n * some corresponding intrinsic object.\n *\n * <p>For each such record, the values associated with its property\n * names can be:\n * <ul>\n * <li>true, in which case this property is simply repaired. The\n *     value associated with that property is not traversed. For\n * \t   example, {@code \"Function.prototype.name\"} leads to true,\n *     meaning that the {@code \"name\"} property of {@code\n *     \"Function.prototype\"} should be repaired (which is needed\n *     when inheriting from @code{Function} and setting the subclass's\n *     {@code \"prototype.name\"} property). If the property is\n *     already an accessor property, it is not repaired (because\n *     accessors are not subject to the override mistake).\n * <li>\"*\", in which case this property is not repaired but the\n *     value associated with that property are traversed and repaired.\n * <li>Another record, in which case this property is not repaired\n *     and that next record represents the disposition of the object\n *     which is its value. For example,{@code \"FunctionPrototype\"}\n *     leads to another record explaining which properties {@code\n *     Function.prototype} need to be repaired.\n */\n\n/**\n * Minimal enablements when all the code is modern and known not to\n * step into the override mistake, except for the following pervasive\n * cases.\n */\nexport const minEnablements = {\n  '%ObjectPrototype%': {\n    toString: true,\n  },\n\n  '%FunctionPrototype%': {\n    toString: true, // set by \"rollup\"\n  },\n\n  '%ErrorPrototype%': {\n    name: true, // set by \"precond\", \"ava\", \"node-fetch\"\n  },\n};\n\n/**\n * Moderate enablements are usually good enough for legacy compat.\n */\nexport const moderateEnablements = {\n  '%ObjectPrototype%': {\n    toString: true,\n    valueOf: true,\n  },\n\n  '%ArrayPrototype%': {\n    toString: true,\n    push: true, // set by \"Google Analytics\"\n  },\n\n  // Function.prototype has no 'prototype' property to enable.\n  // Function instances have their own 'name' and 'length' properties\n  // which are configurable and non-writable. Thus, they are already\n  // non-assignable anyway.\n  '%FunctionPrototype%': {\n    constructor: true, // set by \"regenerator-runtime\"\n    bind: true, // set by \"underscore\", \"express\"\n    toString: true, // set by \"rollup\"\n  },\n\n  '%ErrorPrototype%': {\n    constructor: true, // set by \"fast-json-patch\", \"node-fetch\"\n    message: true,\n    name: true, // set by \"precond\", \"ava\", \"node-fetch\", \"node 14\"\n    toString: true, // set by \"bluebird\"\n  },\n\n  '%TypeErrorPrototype%': {\n    constructor: true, // set by \"readable-stream\"\n    message: true, // set by \"tape\"\n    name: true, // set by \"readable-stream\", \"node 14\"\n  },\n\n  '%SyntaxErrorPrototype%': {\n    message: true, // to match TypeErrorPrototype.message\n    name: true, // set by \"node 14\"\n  },\n\n  '%RangeErrorPrototype%': {\n    message: true, // to match TypeErrorPrototype.message\n    name: true, // set by \"node 14\"\n  },\n\n  '%URIErrorPrototype%': {\n    message: true, // to match TypeErrorPrototype.message\n    name: true, // set by \"node 14\"\n  },\n\n  '%EvalErrorPrototype%': {\n    message: true, // to match TypeErrorPrototype.message\n    name: true, // set by \"node 14\"\n  },\n\n  '%ReferenceErrorPrototype%': {\n    message: true, // to match TypeErrorPrototype.message\n    name: true, // set by \"node 14\"\n  },\n\n  '%PromisePrototype%': {\n    constructor: true, // set by \"core-js\"\n  },\n\n  '%TypedArrayPrototype%': '*', // set by https://github.com/feross/buffer\n\n  '%Generator%': {\n    constructor: true,\n    name: true,\n    toString: true,\n  },\n\n  '%IteratorPrototype%': {\n    toString: true,\n  },\n};\n\n/**\n * The 'severe' enablement are needed because of issues tracked at\n * https://github.com/endojs/endo/issues/576\n *\n * They are like the `moderate` enablements except for the entries below.\n */\nexport const severeEnablements = {\n  ...moderateEnablements,\n\n  /**\n   * Rollup(as used at least by vega) and webpack\n   * (as used at least by regenerator) both turn exports into assignments\n   * to a big `exports` object that inherits directly from\n   * `Object.prototype`.Some of the exported names we've seen include\n   * `hasOwnProperty`, `constructor`, and `toString`. But the strategy used\n   * by rollup and webpack means potentionally turns any exported name\n   * into an assignment rejected by the override mistake.That's why\n   * we take the extreme step of enabling everything on`Object.prototype`.\n   *\n   * In addition, code doing inheritance manually will often override\n   * the `constructor` property on the new prototype by assignment. We've\n   * seen this several times.\n   *\n   * The cost of enabling all these is that they create a miserable debugging\n   * experience. https://github.com/Agoric/agoric-sdk/issues/2324 explains\n   * how it confused the Node console.\n   *\n   * The vscode debugger's object inspector shows the own data properties of\n   * an object, which is typically what you want, but also shows both getter\n   * and setter for every accessor property whether inherited or own.\n   * With the `'*'` setting here, all the properties inherited from\n   * `Object.prototype` are accessors, creating an unusable display as seen\n   * at As explained at\n   * https://github.com/endojs/endo/blob/master/packages/ses/lockdown-options.md#overridetaming-options\n   * Open the triangles at the bottom of that section.\n   */\n  '%ObjectPrototype%': '*',\n\n  /**\n   * The widely used Buffer defined at https://github.com/feross/buffer\n   * on initialization, manually creates the equivalent of a subclass of\n   * `TypedArray`, which it then initializes by assignment. These assignments\n   * include enough of the `TypeArray` methods that here, we just enable\n   * them all.\n   */\n  '%TypedArrayPrototype%': '*',\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,cAAc,GAAG;EAC5B,qBAAqB;IACnBC,QAAQ,EAAE;EADS,CADO;EAK5B,uBAAuB;IACrBA,QAAQ,EAAE,IADW,CACL;;EADK,CALK;EAS5B,oBAAoB;IAClBC,IAAI,EAAE,IADY,CACN;;EADM;AATQ,CAAvB;AAcP;AACA;AACA;;AACA,OAAO,MAAMC,mBAAmB,GAAG;EACjC,qBAAqB;IACnBF,QAAQ,EAAE,IADS;IAEnBG,OAAO,EAAE;EAFU,CADY;EAMjC,oBAAoB;IAClBH,QAAQ,EAAE,IADQ;IAElBI,IAAI,EAAE,IAFY,CAEN;;EAFM,CANa;EAWjC;EACA;EACA;EACA;EACA,uBAAuB;IACrBC,WAAW,EAAE,IADQ;IACF;IACnBC,IAAI,EAAE,IAFe;IAET;IACZN,QAAQ,EAAE,IAHW,CAGL;;EAHK,CAfU;EAqBjC,oBAAoB;IAClBK,WAAW,EAAE,IADK;IACC;IACnBE,OAAO,EAAE,IAFS;IAGlBN,IAAI,EAAE,IAHY;IAGN;IACZD,QAAQ,EAAE,IAJQ,CAIF;;EAJE,CArBa;EA4BjC,wBAAwB;IACtBK,WAAW,EAAE,IADS;IACH;IACnBE,OAAO,EAAE,IAFa;IAEP;IACfN,IAAI,EAAE,IAHgB,CAGV;;EAHU,CA5BS;EAkCjC,0BAA0B;IACxBM,OAAO,EAAE,IADe;IACT;IACfN,IAAI,EAAE,IAFkB,CAEZ;;EAFY,CAlCO;EAuCjC,yBAAyB;IACvBM,OAAO,EAAE,IADc;IACR;IACfN,IAAI,EAAE,IAFiB,CAEX;;EAFW,CAvCQ;EA4CjC,uBAAuB;IACrBM,OAAO,EAAE,IADY;IACN;IACfN,IAAI,EAAE,IAFe,CAET;;EAFS,CA5CU;EAiDjC,wBAAwB;IACtBM,OAAO,EAAE,IADa;IACP;IACfN,IAAI,EAAE,IAFgB,CAEV;;EAFU,CAjDS;EAsDjC,6BAA6B;IAC3BM,OAAO,EAAE,IADkB;IACZ;IACfN,IAAI,EAAE,IAFqB,CAEf;;EAFe,CAtDI;EA2DjC,sBAAsB;IACpBI,WAAW,EAAE,IADO,CACD;;EADC,CA3DW;EA+DjC,yBAAyB,GA/DQ;EA+DH;EAE9B,eAAe;IACbA,WAAW,EAAE,IADA;IAEbJ,IAAI,EAAE,IAFO;IAGbD,QAAQ,EAAE;EAHG,CAjEkB;EAuEjC,uBAAuB;IACrBA,QAAQ,EAAE;EADW;AAvEU,CAA5B;AA4EP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMQ,iBAAiB,GAAG,EAC/B,GAAGN,mBAD4B;;EAG/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,qBAAqB,GA9BU;;EAgC/B;AACF;AACA;AACA;AACA;AACA;AACA;EACE,yBAAyB;AAvCM,CAA1B"},"metadata":{},"sourceType":"module"}