{"ast":null,"code":"// @ts-check\n// To ensure that this module operates without special privilege, it should\n// not reference the free variable `console` except for its own internal\n// debugging purposes in the declaration of `internalDebugConsole`, which is\n// normally commented out.\nimport { WeakSet, arrayFilter, arrayMap, arrayPush, defineProperty, freeze, fromEntries, isError, stringEndsWith, weaksetAdd, weaksetHas } from '../commons.js';\nimport './types.js';\nimport './internal-types.js'; // For our internal debugging purposes, uncomment\n// const internalDebugConsole = console;\n// The whitelists of console methods, from:\n// Whatwg \"living standard\" https://console.spec.whatwg.org/\n// Node https://nodejs.org/dist/latest-v14.x/docs/api/console.html\n// MDN https://developer.mozilla.org/en-US/docs/Web/API/Console_API\n// TypeScript https://openstapps.gitlab.io/projectmanagement/interfaces/_node_modules__types_node_globals_d_.console.html\n// Chrome https://developers.google.com/web/tools/chrome-devtools/console/api\n// All console level methods have parameters (fmt?, ...args)\n// where the argument sequence `fmt?, ...args` formats args according to\n// fmt if fmt is a format string. Otherwise, it just renders them all as values\n// separated by spaces.\n// https://console.spec.whatwg.org/#formatter\n// https://nodejs.org/docs/latest/api/util.html#util_util_format_format_args\n// For the causal console, all occurrences of `fmt, ...args` or `...args` by\n// itself must check for the presence of an error to ask the\n// `loggedErrorHandler` to handle.\n// In theory we should do a deep inspection to detect for example an array\n// containing an error. We currently do not detect these and may never.\n\n/** @typedef {keyof VirtualConsole | 'profile' | 'profileEnd'} ConsoleProps */\n\n/** @type {readonly [ConsoleProps, LogSeverity | undefined][]} */\n\nconst consoleLevelMethods = freeze([['debug', 'debug'], // (fmt?, ...args) verbose level on Chrome\n['log', 'log'], // (fmt?, ...args) info level on Chrome\n['info', 'info'], // (fmt?, ...args)\n['warn', 'warn'], // (fmt?, ...args)\n['error', 'error'], // (fmt?, ...args)\n['trace', 'log'], // (fmt?, ...args)\n['dirxml', 'log'], // (fmt?, ...args)\n['group', 'log'], // (fmt?, ...args)\n['groupCollapsed', 'log'] // (fmt?, ...args)\n]);\n/** @type {readonly [ConsoleProps, LogSeverity | undefined][]} */\n\nconst consoleOtherMethods = freeze([['assert', 'error'], // (value, fmt?, ...args)\n['timeLog', 'log'], // (label?, ...args) no fmt string\n// Insensitive to whether any argument is an error. All arguments can pass\n// thru to baseConsole as is.\n['clear', undefined], // ()\n['count', 'info'], // (label?)\n['countReset', undefined], // (label?)\n['dir', 'log'], // (item, options?)\n['groupEnd', 'log'], // ()\n// In theory tabular data may be or contain an error. However, we currently\n// do not detect these and may never.\n['table', 'log'], // (tabularData, properties?)\n['time', 'info'], // (label?)\n['timeEnd', 'info'], // (label?)\n// Node Inspector only, MDN, and TypeScript, but not whatwg\n['profile', undefined], // (label?)\n['profileEnd', undefined], // (label?)\n['timeStamp', undefined] // (label?)\n]);\n/** @type {readonly [ConsoleProps, LogSeverity | undefined][]} */\n\nexport const consoleWhitelist = freeze([...consoleLevelMethods, ...consoleOtherMethods]);\n/**\n * consoleOmittedProperties is currently unused. I record and maintain it here\n * with the intention that it be treated like the `false` entries in the main\n * SES whitelist: that seeing these on the original console is expected, but\n * seeing anything else that's outside the whitelist is surprising and should\n * provide a diagnostic.\n *\n * const consoleOmittedProperties = freeze([\n *   'memory', // Chrome\n *   'exception', // FF, MDN\n *   '_ignoreErrors', // Node\n *   '_stderr', // Node\n *   '_stderrErrorHandler', // Node\n *   '_stdout', // Node\n *   '_stdoutErrorHandler', // Node\n *   '_times', // Node\n *   'context', // Chrome, Node\n *   'record', // Safari\n *   'recordEnd', // Safari\n *\n *   'screenshot', // Safari\n *   // Symbols\n *   '@@toStringTag', // Chrome: \"Object\", Safari: \"Console\"\n *   // A variety of other symbols also seen on Node\n * ]);\n */\n// /////////////////////////////////////////////////////////////////////////////\n\n/** @type {MakeLoggingConsoleKit} */\n\nconst makeLoggingConsoleKit = function (loggedErrorHandler) {\n  let {\n    shouldResetForDebugging = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (shouldResetForDebugging) {\n    // eslint-disable-next-line @endo/no-polymorphic-call\n    loggedErrorHandler.resetErrorTagNum();\n  } // Not frozen!\n\n\n  let logArray = [];\n  const loggingConsole = fromEntries(arrayMap(consoleWhitelist, _ref => {\n    let [name, _] = _ref;\n\n    // Use an arrow function so that it doesn't come with its own name in\n    // its printed form. Instead, we're hoping that tooling uses only\n    // the `.name` property set below.\n\n    /**\n     * @param {...any} args\n     */\n    const method = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      arrayPush(logArray, [name, ...args]);\n    };\n\n    defineProperty(method, 'name', {\n      value: name\n    });\n    return [name, freeze(method)];\n  }));\n  freeze(loggingConsole);\n\n  const takeLog = () => {\n    const result = freeze(logArray);\n    logArray = [];\n    return result;\n  };\n\n  freeze(takeLog);\n  const typedLoggingConsole =\n  /** @type {VirtualConsole} */\n  loggingConsole;\n  return freeze({\n    loggingConsole: typedLoggingConsole,\n    takeLog\n  });\n};\n\nfreeze(makeLoggingConsoleKit);\nexport { makeLoggingConsoleKit }; // /////////////////////////////////////////////////////////////////////////////\n\n/** @type {ErrorInfo} */\n\nconst ErrorInfo = {\n  NOTE: 'ERROR_NOTE:',\n  MESSAGE: 'ERROR_MESSAGE:'\n};\nfreeze(ErrorInfo);\n/**\n * The error annotations are sent to the baseConsole by calling some level\n * method. The 'debug' level seems best, because the Chrome console classifies\n * `debug` as verbose and does not show it by default. But we keep it symbolic\n * so we can change our mind. (On Node, `debug`, `log`, and `info` are aliases\n * for the same function and so will behave the same there.)\n */\n\nexport const BASE_CONSOLE_LEVEL = 'debug';\n/** @type {MakeCausalConsole} */\n\nconst makeCausalConsole = (baseConsole, loggedErrorHandler) => {\n  const {\n    getStackString,\n    tagError,\n    takeMessageLogArgs,\n    takeNoteLogArgsArray\n  } = loggedErrorHandler;\n  /**\n   * @param {ReadonlyArray<any>} logArgs\n   * @param {Array<any>} subErrorsSink\n   * @returns {any}\n   */\n\n  const extractErrorArgs = (logArgs, subErrorsSink) => {\n    const argTags = arrayMap(logArgs, arg => {\n      if (isError(arg)) {\n        arrayPush(subErrorsSink, arg);\n        return `(${tagError(arg)})`;\n      }\n\n      return arg;\n    });\n    return argTags;\n  };\n  /**\n   * @param {Error} error\n   * @param {ErrorInfoKind} kind\n   * @param {readonly any[]} logArgs\n   * @param {Array<Error>} subErrorsSink\n   */\n\n\n  const logErrorInfo = (error, kind, logArgs, subErrorsSink) => {\n    const errorTag = tagError(error);\n    const errorName = kind === ErrorInfo.MESSAGE ? `${errorTag}:` : `${errorTag} ${kind}`;\n    const argTags = extractErrorArgs(logArgs, subErrorsSink); // eslint-disable-next-line @endo/no-polymorphic-call\n\n    baseConsole[BASE_CONSOLE_LEVEL](errorName, ...argTags);\n  };\n  /**\n   * Logs the `subErrors` within a group name mentioning `optTag`.\n   *\n   * @param {Error[]} subErrors\n   * @param {string | undefined} optTag\n   * @returns {void}\n   */\n\n\n  const logSubErrors = function (subErrors) {\n    let optTag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n    if (subErrors.length === 0) {\n      return;\n    }\n\n    if (subErrors.length === 1 && optTag === undefined) {\n      // eslint-disable-next-line no-use-before-define\n      logError(subErrors[0]);\n      return;\n    }\n\n    let label;\n\n    if (subErrors.length === 1) {\n      label = `Nested error`;\n    } else {\n      label = `Nested ${subErrors.length} errors`;\n    }\n\n    if (optTag !== undefined) {\n      label = `${label} under ${optTag}`;\n    } // eslint-disable-next-line @endo/no-polymorphic-call\n\n\n    baseConsole.group(label);\n\n    try {\n      for (const subError of subErrors) {\n        // eslint-disable-next-line no-use-before-define\n        logError(subError);\n      }\n    } finally {\n      // eslint-disable-next-line @endo/no-polymorphic-call\n      baseConsole.groupEnd();\n    }\n  };\n\n  const errorsLogged = new WeakSet();\n  /** @type {NoteCallback} */\n\n  const noteCallback = (error, noteLogArgs) => {\n    const subErrors = []; // Annotation arrived after the error has already been logged,\n    // so just log the annotation immediately, rather than remembering it.\n\n    logErrorInfo(error, ErrorInfo.NOTE, noteLogArgs, subErrors);\n    logSubErrors(subErrors, tagError(error));\n  };\n  /**\n   * @param {Error} error\n   */\n\n\n  const logError = error => {\n    if (weaksetHas(errorsLogged, error)) {\n      return;\n    }\n\n    const errorTag = tagError(error);\n    weaksetAdd(errorsLogged, error);\n    const subErrors = [];\n    const messageLogArgs = takeMessageLogArgs(error);\n    const noteLogArgsArray = takeNoteLogArgsArray(error, noteCallback); // Show the error's most informative error message\n\n    if (messageLogArgs === undefined) {\n      // If there is no message log args, then just show the message that\n      // the error itself carries.\n      // eslint-disable-next-line @endo/no-polymorphic-call\n      baseConsole[BASE_CONSOLE_LEVEL](`${errorTag}:`, error.message);\n    } else {\n      // If there is one, we take it to be strictly more informative than the\n      // message string carried by the error, so show it *instead*.\n      logErrorInfo(error, ErrorInfo.MESSAGE, messageLogArgs, subErrors);\n    } // After the message but before any other annotations, show the stack.\n\n\n    let stackString = getStackString(error);\n\n    if (typeof stackString === 'string' && stackString.length >= 1 && !stringEndsWith(stackString, '\\n')) {\n      stackString += '\\n';\n    } // eslint-disable-next-line @endo/no-polymorphic-call\n\n\n    baseConsole[BASE_CONSOLE_LEVEL](stackString); // Show the other annotations on error\n\n    for (const noteLogArgs of noteLogArgsArray) {\n      logErrorInfo(error, ErrorInfo.NOTE, noteLogArgs, subErrors);\n    } // explain all the errors seen in the messages already emitted.\n\n\n    logSubErrors(subErrors, errorTag);\n  };\n\n  const levelMethods = arrayMap(consoleLevelMethods, _ref2 => {\n    let [level, _] = _ref2;\n\n    /**\n     * @param {...any} logArgs\n     */\n    const levelMethod = function () {\n      const subErrors = [];\n\n      for (var _len2 = arguments.length, logArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        logArgs[_key2] = arguments[_key2];\n      }\n\n      const argTags = extractErrorArgs(logArgs, subErrors); // @ts-ignore\n      // eslint-disable-next-line @endo/no-polymorphic-call\n\n      baseConsole[level](...argTags);\n      logSubErrors(subErrors);\n    };\n\n    defineProperty(levelMethod, 'name', {\n      value: level\n    });\n    return [level, freeze(levelMethod)];\n  });\n  const otherMethodNames = arrayFilter(consoleOtherMethods, _ref3 => {\n    let [name, _] = _ref3;\n    return name in baseConsole;\n  });\n  const otherMethods = arrayMap(otherMethodNames, _ref4 => {\n    let [name, _] = _ref4;\n\n    /**\n     * @param {...any} args\n     */\n    const otherMethod = function () {\n      // @ts-ignore\n      // eslint-disable-next-line @endo/no-polymorphic-call\n      baseConsole[name](...arguments);\n      return undefined;\n    };\n\n    defineProperty(otherMethod, 'name', {\n      value: name\n    });\n    return [name, freeze(otherMethod)];\n  });\n  const causalConsole = fromEntries([...levelMethods, ...otherMethods]);\n  return (\n    /** @type {VirtualConsole} */\n    freeze(causalConsole)\n  );\n};\n\nfreeze(makeCausalConsole);\nexport { makeCausalConsole }; // /////////////////////////////////////////////////////////////////////////////\n\n/** @type {FilterConsole} */\n\nconst filterConsole = function (baseConsole, filter) {\n  let _topic = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n  // TODO do something with optional topic string\n  const whitelist = arrayFilter(consoleWhitelist, _ref5 => {\n    let [name, _] = _ref5;\n    return name in baseConsole;\n  });\n  const methods = arrayMap(whitelist, _ref6 => {\n    let [name, severity] = _ref6;\n\n    /**\n     * @param {...any} args\n     */\n    const method = function () {\n      // eslint-disable-next-line @endo/no-polymorphic-call\n      if (severity === undefined || filter.canLog(severity)) {\n        // @ts-ignore\n        // eslint-disable-next-line @endo/no-polymorphic-call\n        baseConsole[name](...arguments);\n      }\n    };\n\n    return [name, freeze(method)];\n  });\n  const filteringConsole = fromEntries(methods);\n  return (\n    /** @type {VirtualConsole} */\n    freeze(filteringConsole)\n  );\n};\n\nfreeze(filterConsole);\nexport { filterConsole };","map":{"version":3,"names":["WeakSet","arrayFilter","arrayMap","arrayPush","defineProperty","freeze","fromEntries","isError","stringEndsWith","weaksetAdd","weaksetHas","consoleLevelMethods","consoleOtherMethods","undefined","consoleWhitelist","makeLoggingConsoleKit","loggedErrorHandler","shouldResetForDebugging","resetErrorTagNum","logArray","loggingConsole","name","_","method","args","value","takeLog","result","typedLoggingConsole","ErrorInfo","NOTE","MESSAGE","BASE_CONSOLE_LEVEL","makeCausalConsole","baseConsole","getStackString","tagError","takeMessageLogArgs","takeNoteLogArgsArray","extractErrorArgs","logArgs","subErrorsSink","argTags","arg","logErrorInfo","error","kind","errorTag","errorName","logSubErrors","subErrors","optTag","length","logError","label","group","subError","groupEnd","errorsLogged","noteCallback","noteLogArgs","messageLogArgs","noteLogArgsArray","message","stackString","levelMethods","level","levelMethod","otherMethodNames","otherMethods","otherMethod","causalConsole","filterConsole","filter","_topic","whitelist","methods","severity","canLog","filteringConsole"],"sources":["/Users/carlostrigoseguin/Documents/KRYHA/agoric/character-builder-repo/ui/node_modules/ses/src/error/console.js"],"sourcesContent":["// @ts-check\n\n// To ensure that this module operates without special privilege, it should\n// not reference the free variable `console` except for its own internal\n// debugging purposes in the declaration of `internalDebugConsole`, which is\n// normally commented out.\n\nimport {\n  WeakSet,\n  arrayFilter,\n  arrayMap,\n  arrayPush,\n  defineProperty,\n  freeze,\n  fromEntries,\n  isError,\n  stringEndsWith,\n  weaksetAdd,\n  weaksetHas,\n} from '../commons.js';\nimport './types.js';\nimport './internal-types.js';\n\n// For our internal debugging purposes, uncomment\n// const internalDebugConsole = console;\n\n// The whitelists of console methods, from:\n// Whatwg \"living standard\" https://console.spec.whatwg.org/\n// Node https://nodejs.org/dist/latest-v14.x/docs/api/console.html\n// MDN https://developer.mozilla.org/en-US/docs/Web/API/Console_API\n// TypeScript https://openstapps.gitlab.io/projectmanagement/interfaces/_node_modules__types_node_globals_d_.console.html\n// Chrome https://developers.google.com/web/tools/chrome-devtools/console/api\n\n// All console level methods have parameters (fmt?, ...args)\n// where the argument sequence `fmt?, ...args` formats args according to\n// fmt if fmt is a format string. Otherwise, it just renders them all as values\n// separated by spaces.\n// https://console.spec.whatwg.org/#formatter\n// https://nodejs.org/docs/latest/api/util.html#util_util_format_format_args\n\n// For the causal console, all occurrences of `fmt, ...args` or `...args` by\n// itself must check for the presence of an error to ask the\n// `loggedErrorHandler` to handle.\n// In theory we should do a deep inspection to detect for example an array\n// containing an error. We currently do not detect these and may never.\n\n/** @typedef {keyof VirtualConsole | 'profile' | 'profileEnd'} ConsoleProps */\n\n/** @type {readonly [ConsoleProps, LogSeverity | undefined][]} */\nconst consoleLevelMethods = freeze([\n  ['debug', 'debug'], // (fmt?, ...args) verbose level on Chrome\n  ['log', 'log'], // (fmt?, ...args) info level on Chrome\n  ['info', 'info'], // (fmt?, ...args)\n  ['warn', 'warn'], // (fmt?, ...args)\n  ['error', 'error'], // (fmt?, ...args)\n\n  ['trace', 'log'], // (fmt?, ...args)\n  ['dirxml', 'log'], // (fmt?, ...args)\n  ['group', 'log'], // (fmt?, ...args)\n  ['groupCollapsed', 'log'], // (fmt?, ...args)\n]);\n\n/** @type {readonly [ConsoleProps, LogSeverity | undefined][]} */\nconst consoleOtherMethods = freeze([\n  ['assert', 'error'], // (value, fmt?, ...args)\n  ['timeLog', 'log'], // (label?, ...args) no fmt string\n\n  // Insensitive to whether any argument is an error. All arguments can pass\n  // thru to baseConsole as is.\n  ['clear', undefined], // ()\n  ['count', 'info'], // (label?)\n  ['countReset', undefined], // (label?)\n  ['dir', 'log'], // (item, options?)\n  ['groupEnd', 'log'], // ()\n  // In theory tabular data may be or contain an error. However, we currently\n  // do not detect these and may never.\n  ['table', 'log'], // (tabularData, properties?)\n  ['time', 'info'], // (label?)\n  ['timeEnd', 'info'], // (label?)\n\n  // Node Inspector only, MDN, and TypeScript, but not whatwg\n  ['profile', undefined], // (label?)\n  ['profileEnd', undefined], // (label?)\n  ['timeStamp', undefined], // (label?)\n]);\n\n/** @type {readonly [ConsoleProps, LogSeverity | undefined][]} */\nexport const consoleWhitelist = freeze([\n  ...consoleLevelMethods,\n  ...consoleOtherMethods,\n]);\n\n/**\n * consoleOmittedProperties is currently unused. I record and maintain it here\n * with the intention that it be treated like the `false` entries in the main\n * SES whitelist: that seeing these on the original console is expected, but\n * seeing anything else that's outside the whitelist is surprising and should\n * provide a diagnostic.\n *\n * const consoleOmittedProperties = freeze([\n *   'memory', // Chrome\n *   'exception', // FF, MDN\n *   '_ignoreErrors', // Node\n *   '_stderr', // Node\n *   '_stderrErrorHandler', // Node\n *   '_stdout', // Node\n *   '_stdoutErrorHandler', // Node\n *   '_times', // Node\n *   'context', // Chrome, Node\n *   'record', // Safari\n *   'recordEnd', // Safari\n *\n *   'screenshot', // Safari\n *   // Symbols\n *   '@@toStringTag', // Chrome: \"Object\", Safari: \"Console\"\n *   // A variety of other symbols also seen on Node\n * ]);\n */\n\n// /////////////////////////////////////////////////////////////////////////////\n\n/** @type {MakeLoggingConsoleKit} */\nconst makeLoggingConsoleKit = (\n  loggedErrorHandler,\n  { shouldResetForDebugging = false } = {},\n) => {\n  if (shouldResetForDebugging) {\n    // eslint-disable-next-line @endo/no-polymorphic-call\n    loggedErrorHandler.resetErrorTagNum();\n  }\n\n  // Not frozen!\n  let logArray = [];\n\n  const loggingConsole = fromEntries(\n    arrayMap(consoleWhitelist, ([name, _]) => {\n      // Use an arrow function so that it doesn't come with its own name in\n      // its printed form. Instead, we're hoping that tooling uses only\n      // the `.name` property set below.\n      /**\n       * @param {...any} args\n       */\n      const method = (...args) => {\n        arrayPush(logArray, [name, ...args]);\n      };\n      defineProperty(method, 'name', { value: name });\n      return [name, freeze(method)];\n    }),\n  );\n  freeze(loggingConsole);\n\n  const takeLog = () => {\n    const result = freeze(logArray);\n    logArray = [];\n    return result;\n  };\n  freeze(takeLog);\n\n  const typedLoggingConsole = /** @type {VirtualConsole} */ (loggingConsole);\n\n  return freeze({ loggingConsole: typedLoggingConsole, takeLog });\n};\nfreeze(makeLoggingConsoleKit);\nexport { makeLoggingConsoleKit };\n\n// /////////////////////////////////////////////////////////////////////////////\n\n/** @type {ErrorInfo} */\nconst ErrorInfo = {\n  NOTE: 'ERROR_NOTE:',\n  MESSAGE: 'ERROR_MESSAGE:',\n};\nfreeze(ErrorInfo);\n\n/**\n * The error annotations are sent to the baseConsole by calling some level\n * method. The 'debug' level seems best, because the Chrome console classifies\n * `debug` as verbose and does not show it by default. But we keep it symbolic\n * so we can change our mind. (On Node, `debug`, `log`, and `info` are aliases\n * for the same function and so will behave the same there.)\n */\nexport const BASE_CONSOLE_LEVEL = 'debug';\n\n/** @type {MakeCausalConsole} */\nconst makeCausalConsole = (baseConsole, loggedErrorHandler) => {\n  const {\n    getStackString,\n    tagError,\n    takeMessageLogArgs,\n    takeNoteLogArgsArray,\n  } = loggedErrorHandler;\n\n  /**\n   * @param {ReadonlyArray<any>} logArgs\n   * @param {Array<any>} subErrorsSink\n   * @returns {any}\n   */\n  const extractErrorArgs = (logArgs, subErrorsSink) => {\n    const argTags = arrayMap(logArgs, arg => {\n      if (isError(arg)) {\n        arrayPush(subErrorsSink, arg);\n        return `(${tagError(arg)})`;\n      }\n      return arg;\n    });\n    return argTags;\n  };\n\n  /**\n   * @param {Error} error\n   * @param {ErrorInfoKind} kind\n   * @param {readonly any[]} logArgs\n   * @param {Array<Error>} subErrorsSink\n   */\n  const logErrorInfo = (error, kind, logArgs, subErrorsSink) => {\n    const errorTag = tagError(error);\n    const errorName =\n      kind === ErrorInfo.MESSAGE ? `${errorTag}:` : `${errorTag} ${kind}`;\n    const argTags = extractErrorArgs(logArgs, subErrorsSink);\n    // eslint-disable-next-line @endo/no-polymorphic-call\n    baseConsole[BASE_CONSOLE_LEVEL](errorName, ...argTags);\n  };\n\n  /**\n   * Logs the `subErrors` within a group name mentioning `optTag`.\n   *\n   * @param {Error[]} subErrors\n   * @param {string | undefined} optTag\n   * @returns {void}\n   */\n  const logSubErrors = (subErrors, optTag = undefined) => {\n    if (subErrors.length === 0) {\n      return;\n    }\n    if (subErrors.length === 1 && optTag === undefined) {\n      // eslint-disable-next-line no-use-before-define\n      logError(subErrors[0]);\n      return;\n    }\n    let label;\n    if (subErrors.length === 1) {\n      label = `Nested error`;\n    } else {\n      label = `Nested ${subErrors.length} errors`;\n    }\n    if (optTag !== undefined) {\n      label = `${label} under ${optTag}`;\n    }\n    // eslint-disable-next-line @endo/no-polymorphic-call\n    baseConsole.group(label);\n    try {\n      for (const subError of subErrors) {\n        // eslint-disable-next-line no-use-before-define\n        logError(subError);\n      }\n    } finally {\n      // eslint-disable-next-line @endo/no-polymorphic-call\n      baseConsole.groupEnd();\n    }\n  };\n\n  const errorsLogged = new WeakSet();\n\n  /** @type {NoteCallback} */\n  const noteCallback = (error, noteLogArgs) => {\n    const subErrors = [];\n    // Annotation arrived after the error has already been logged,\n    // so just log the annotation immediately, rather than remembering it.\n    logErrorInfo(error, ErrorInfo.NOTE, noteLogArgs, subErrors);\n    logSubErrors(subErrors, tagError(error));\n  };\n\n  /**\n   * @param {Error} error\n   */\n  const logError = error => {\n    if (weaksetHas(errorsLogged, error)) {\n      return;\n    }\n    const errorTag = tagError(error);\n    weaksetAdd(errorsLogged, error);\n    const subErrors = [];\n    const messageLogArgs = takeMessageLogArgs(error);\n    const noteLogArgsArray = takeNoteLogArgsArray(error, noteCallback);\n    // Show the error's most informative error message\n    if (messageLogArgs === undefined) {\n      // If there is no message log args, then just show the message that\n      // the error itself carries.\n      // eslint-disable-next-line @endo/no-polymorphic-call\n      baseConsole[BASE_CONSOLE_LEVEL](`${errorTag}:`, error.message);\n    } else {\n      // If there is one, we take it to be strictly more informative than the\n      // message string carried by the error, so show it *instead*.\n      logErrorInfo(error, ErrorInfo.MESSAGE, messageLogArgs, subErrors);\n    }\n    // After the message but before any other annotations, show the stack.\n    let stackString = getStackString(error);\n    if (\n      typeof stackString === 'string' &&\n      stackString.length >= 1 &&\n      !stringEndsWith(stackString, '\\n')\n    ) {\n      stackString += '\\n';\n    }\n    // eslint-disable-next-line @endo/no-polymorphic-call\n    baseConsole[BASE_CONSOLE_LEVEL](stackString);\n    // Show the other annotations on error\n    for (const noteLogArgs of noteLogArgsArray) {\n      logErrorInfo(error, ErrorInfo.NOTE, noteLogArgs, subErrors);\n    }\n    // explain all the errors seen in the messages already emitted.\n    logSubErrors(subErrors, errorTag);\n  };\n\n  const levelMethods = arrayMap(consoleLevelMethods, ([level, _]) => {\n    /**\n     * @param {...any} logArgs\n     */\n    const levelMethod = (...logArgs) => {\n      const subErrors = [];\n      const argTags = extractErrorArgs(logArgs, subErrors);\n      // @ts-ignore\n      // eslint-disable-next-line @endo/no-polymorphic-call\n      baseConsole[level](...argTags);\n      logSubErrors(subErrors);\n    };\n    defineProperty(levelMethod, 'name', { value: level });\n    return [level, freeze(levelMethod)];\n  });\n  const otherMethodNames = arrayFilter(\n    consoleOtherMethods,\n    ([name, _]) => name in baseConsole,\n  );\n  const otherMethods = arrayMap(otherMethodNames, ([name, _]) => {\n    /**\n     * @param {...any} args\n     */\n    const otherMethod = (...args) => {\n      // @ts-ignore\n      // eslint-disable-next-line @endo/no-polymorphic-call\n      baseConsole[name](...args);\n      return undefined;\n    };\n    defineProperty(otherMethod, 'name', { value: name });\n    return [name, freeze(otherMethod)];\n  });\n\n  const causalConsole = fromEntries([...levelMethods, ...otherMethods]);\n  return /** @type {VirtualConsole} */ (freeze(causalConsole));\n};\nfreeze(makeCausalConsole);\nexport { makeCausalConsole };\n\n// /////////////////////////////////////////////////////////////////////////////\n\n/** @type {FilterConsole} */\nconst filterConsole = (baseConsole, filter, _topic = undefined) => {\n  // TODO do something with optional topic string\n  const whitelist = arrayFilter(\n    consoleWhitelist,\n    ([name, _]) => name in baseConsole,\n  );\n  const methods = arrayMap(whitelist, ([name, severity]) => {\n    /**\n     * @param {...any} args\n     */\n    const method = (...args) => {\n      // eslint-disable-next-line @endo/no-polymorphic-call\n      if (severity === undefined || filter.canLog(severity)) {\n        // @ts-ignore\n        // eslint-disable-next-line @endo/no-polymorphic-call\n        baseConsole[name](...args);\n      }\n    };\n    return [name, freeze(method)];\n  });\n  const filteringConsole = fromEntries(methods);\n  return /** @type {VirtualConsole} */ (freeze(filteringConsole));\n};\nfreeze(filterConsole);\nexport { filterConsole };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}