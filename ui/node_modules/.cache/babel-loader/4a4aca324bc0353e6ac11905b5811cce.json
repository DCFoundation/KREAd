{"ast":null,"code":"// @ts-check\nimport { TypeError, globalThis } from '../commons.js';\nimport { loggedErrorHandler as defaultHandler } from './assert.js';\nimport { makeCausalConsole } from './console.js';\nimport './types.js';\nimport './internal-types.js'; // eslint-disable-next-line no-restricted-globals\n\nconst originalConsole = console;\n/**\n * Wrap console unless suppressed.\n * At the moment, the console is considered a host power in the start\n * compartment, and not a primordial. Hence it is absent from the whilelist\n * and bypasses the intrinsicsCollector.\n *\n * @param {\"safe\" | \"unsafe\"} consoleTaming\n * @param {\"platform\" | \"exit\" | \"abort\" | \"report\" | \"none\"} [errorTrapping]\n * @param {GetStackString=} optGetStackString\n */\n\nexport const tameConsole = function () {\n  let consoleTaming = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'safe';\n  let errorTrapping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'platform';\n  let optGetStackString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n  if (consoleTaming !== 'safe' && consoleTaming !== 'unsafe') {\n    throw new TypeError(`unrecognized consoleTaming ${consoleTaming}`);\n  }\n\n  if (consoleTaming === 'unsafe') {\n    return {\n      console: originalConsole\n    };\n  }\n\n  let loggedErrorHandler;\n\n  if (optGetStackString === undefined) {\n    loggedErrorHandler = defaultHandler;\n  } else {\n    loggedErrorHandler = { ...defaultHandler,\n      getStackString: optGetStackString\n    };\n  }\n\n  const causalConsole = makeCausalConsole(originalConsole, loggedErrorHandler); // Attach platform-specific error traps such that any error that gets thrown\n  // at top-of-turn (the bottom of stack) will get logged by our causal\n  // console, revealing the diagnostic information associated with the error,\n  // including the stack from when the error was created.\n  // In the following Node.js and web browser cases, `process` and `window` are\n  // spelled as `globalThis` properties to avoid the overweaning gaze of\n  // Parcel, which dutifully installs an unnecessary `process` shim if we ever\n  // utter that. That unnecessary shim forces the whole bundle into sloppy mode,\n  // which in turn breaks SES's strict mode invariant.\n  // Node.js\n\n  if (errorTrapping !== 'none' && globalThis.process !== undefined) {\n    // eslint-disable-next-line @endo/no-polymorphic-call\n    globalThis.process.on('uncaughtException', error => {\n      // causalConsole is born frozen so not vulnerable to method tampering.\n      // eslint-disable-next-line @endo/no-polymorphic-call\n      causalConsole.error(error);\n\n      if (errorTrapping === 'platform' || errorTrapping === 'exit') {\n        // eslint-disable-next-line @endo/no-polymorphic-call\n        globalThis.process.exit(globalThis.process.exitCode || -1);\n      } else if (errorTrapping === 'abort') {\n        // eslint-disable-next-line @endo/no-polymorphic-call\n        globalThis.process.abort();\n      }\n    });\n  } // Browser\n\n\n  if (errorTrapping !== 'none' && globalThis.window !== undefined && globalThis.window.addEventListener !== undefined) {\n    // eslint-disable-next-line @endo/no-polymorphic-call\n    globalThis.window.addEventListener('error', event => {\n      // eslint-disable-next-line @endo/no-polymorphic-call\n      event.preventDefault(); // eslint-disable-next-line @endo/no-polymorphic-call\n\n      causalConsole.error(event.error);\n\n      if (errorTrapping === 'exit' || errorTrapping === 'abort') {\n        globalThis.window.location.href = `about:blank`;\n      }\n    });\n  }\n\n  return {\n    console: causalConsole\n  };\n};","map":{"version":3,"names":["TypeError","globalThis","loggedErrorHandler","defaultHandler","makeCausalConsole","originalConsole","console","tameConsole","consoleTaming","errorTrapping","optGetStackString","undefined","getStackString","causalConsole","process","on","error","exit","exitCode","abort","window","addEventListener","event","preventDefault","location","href"],"sources":["/Users/carlostrigoseguin/Documents/KRYHA/agoric/character-builder-repo/ui/node_modules/ses/src/error/tame-console.js"],"sourcesContent":["// @ts-check\n\nimport { TypeError, globalThis } from '../commons.js';\nimport { loggedErrorHandler as defaultHandler } from './assert.js';\nimport { makeCausalConsole } from './console.js';\nimport './types.js';\nimport './internal-types.js';\n\n// eslint-disable-next-line no-restricted-globals\nconst originalConsole = console;\n\n/**\n * Wrap console unless suppressed.\n * At the moment, the console is considered a host power in the start\n * compartment, and not a primordial. Hence it is absent from the whilelist\n * and bypasses the intrinsicsCollector.\n *\n * @param {\"safe\" | \"unsafe\"} consoleTaming\n * @param {\"platform\" | \"exit\" | \"abort\" | \"report\" | \"none\"} [errorTrapping]\n * @param {GetStackString=} optGetStackString\n */\nexport const tameConsole = (\n  consoleTaming = 'safe',\n  errorTrapping = 'platform',\n  optGetStackString = undefined,\n) => {\n  if (consoleTaming !== 'safe' && consoleTaming !== 'unsafe') {\n    throw new TypeError(`unrecognized consoleTaming ${consoleTaming}`);\n  }\n\n  if (consoleTaming === 'unsafe') {\n    return { console: originalConsole };\n  }\n  let loggedErrorHandler;\n  if (optGetStackString === undefined) {\n    loggedErrorHandler = defaultHandler;\n  } else {\n    loggedErrorHandler = {\n      ...defaultHandler,\n      getStackString: optGetStackString,\n    };\n  }\n  const causalConsole = makeCausalConsole(originalConsole, loggedErrorHandler);\n\n  // Attach platform-specific error traps such that any error that gets thrown\n  // at top-of-turn (the bottom of stack) will get logged by our causal\n  // console, revealing the diagnostic information associated with the error,\n  // including the stack from when the error was created.\n\n  // In the following Node.js and web browser cases, `process` and `window` are\n  // spelled as `globalThis` properties to avoid the overweaning gaze of\n  // Parcel, which dutifully installs an unnecessary `process` shim if we ever\n  // utter that. That unnecessary shim forces the whole bundle into sloppy mode,\n  // which in turn breaks SES's strict mode invariant.\n\n  // Node.js\n  if (errorTrapping !== 'none' && globalThis.process !== undefined) {\n    // eslint-disable-next-line @endo/no-polymorphic-call\n    globalThis.process.on('uncaughtException', error => {\n      // causalConsole is born frozen so not vulnerable to method tampering.\n      // eslint-disable-next-line @endo/no-polymorphic-call\n      causalConsole.error(error);\n      if (errorTrapping === 'platform' || errorTrapping === 'exit') {\n        // eslint-disable-next-line @endo/no-polymorphic-call\n        globalThis.process.exit(globalThis.process.exitCode || -1);\n      } else if (errorTrapping === 'abort') {\n        // eslint-disable-next-line @endo/no-polymorphic-call\n        globalThis.process.abort();\n      }\n    });\n  }\n\n  // Browser\n  if (\n    errorTrapping !== 'none' &&\n    globalThis.window !== undefined &&\n    globalThis.window.addEventListener !== undefined\n  ) {\n    // eslint-disable-next-line @endo/no-polymorphic-call\n    globalThis.window.addEventListener('error', event => {\n      // eslint-disable-next-line @endo/no-polymorphic-call\n      event.preventDefault();\n      // eslint-disable-next-line @endo/no-polymorphic-call\n      causalConsole.error(event.error);\n      if (errorTrapping === 'exit' || errorTrapping === 'abort') {\n        globalThis.window.location.href = `about:blank`;\n      }\n    });\n  }\n\n  return { console: causalConsole };\n};\n"],"mappings":"AAAA;AAEA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,eAAtC;AACA,SAASC,kBAAkB,IAAIC,cAA/B,QAAqD,aAArD;AACA,SAASC,iBAAT,QAAkC,cAAlC;AACA,OAAO,YAAP;AACA,OAAO,qBAAP,C,CAEA;;AACA,MAAMC,eAAe,GAAGC,OAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAG,YAItB;EAAA,IAHHC,aAGG,uEAHa,MAGb;EAAA,IAFHC,aAEG,uEAFa,UAEb;EAAA,IADHC,iBACG,uEADiBC,SACjB;;EACH,IAAIH,aAAa,KAAK,MAAlB,IAA4BA,aAAa,KAAK,QAAlD,EAA4D;IAC1D,MAAM,IAAIR,SAAJ,CAAe,8BAA6BQ,aAAc,EAA1D,CAAN;EACD;;EAED,IAAIA,aAAa,KAAK,QAAtB,EAAgC;IAC9B,OAAO;MAAEF,OAAO,EAAED;IAAX,CAAP;EACD;;EACD,IAAIH,kBAAJ;;EACA,IAAIQ,iBAAiB,KAAKC,SAA1B,EAAqC;IACnCT,kBAAkB,GAAGC,cAArB;EACD,CAFD,MAEO;IACLD,kBAAkB,GAAG,EACnB,GAAGC,cADgB;MAEnBS,cAAc,EAAEF;IAFG,CAArB;EAID;;EACD,MAAMG,aAAa,GAAGT,iBAAiB,CAACC,eAAD,EAAkBH,kBAAlB,CAAvC,CAjBG,CAmBH;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;;EACA,IAAIO,aAAa,KAAK,MAAlB,IAA4BR,UAAU,CAACa,OAAX,KAAuBH,SAAvD,EAAkE;IAChE;IACAV,UAAU,CAACa,OAAX,CAAmBC,EAAnB,CAAsB,mBAAtB,EAA2CC,KAAK,IAAI;MAClD;MACA;MACAH,aAAa,CAACG,KAAd,CAAoBA,KAApB;;MACA,IAAIP,aAAa,KAAK,UAAlB,IAAgCA,aAAa,KAAK,MAAtD,EAA8D;QAC5D;QACAR,UAAU,CAACa,OAAX,CAAmBG,IAAnB,CAAwBhB,UAAU,CAACa,OAAX,CAAmBI,QAAnB,IAA+B,CAAC,CAAxD;MACD,CAHD,MAGO,IAAIT,aAAa,KAAK,OAAtB,EAA+B;QACpC;QACAR,UAAU,CAACa,OAAX,CAAmBK,KAAnB;MACD;IACF,CAXD;EAYD,CA7CE,CA+CH;;;EACA,IACEV,aAAa,KAAK,MAAlB,IACAR,UAAU,CAACmB,MAAX,KAAsBT,SADtB,IAEAV,UAAU,CAACmB,MAAX,CAAkBC,gBAAlB,KAAuCV,SAHzC,EAIE;IACA;IACAV,UAAU,CAACmB,MAAX,CAAkBC,gBAAlB,CAAmC,OAAnC,EAA4CC,KAAK,IAAI;MACnD;MACAA,KAAK,CAACC,cAAN,GAFmD,CAGnD;;MACAV,aAAa,CAACG,KAAd,CAAoBM,KAAK,CAACN,KAA1B;;MACA,IAAIP,aAAa,KAAK,MAAlB,IAA4BA,aAAa,KAAK,OAAlD,EAA2D;QACzDR,UAAU,CAACmB,MAAX,CAAkBI,QAAlB,CAA2BC,IAA3B,GAAmC,aAAnC;MACD;IACF,CARD;EASD;;EAED,OAAO;IAAEnB,OAAO,EAAEO;EAAX,CAAP;AACD,CAtEM"},"metadata":{},"sourceType":"module"}