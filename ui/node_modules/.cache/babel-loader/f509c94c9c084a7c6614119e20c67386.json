{"ast":null,"code":"// @ts-check\n\n/** @typedef {string} CapTPSlot */\n\n/**\n * @typedef {Object} TrapImpl\n * @property {(target: any, args: Array<any>) => any} applyFunction function\n * application\n * @property {(\n *   target: any,\n *   method: string | symbol | number,\n *   args: Array<any>\n * ) => any} applyMethod method invocation, which is an atomic lookup of method\n * and apply\n * @property {(target: any, prop: string | symbol | number) => any} get property\n * lookup\n */\n\n/**\n * @typedef {[boolean, import('@endo/marshal').CapData<CapTPSlot>]} TrapCompletion The head of the pair\n * is the `isRejected` value indicating whether the sync call was an exception,\n * and tail of the pair is the serialized fulfillment value or rejection reason.\n * (The fulfillment value is a non-thenable.  The rejection reason is normally\n * an error.)\n */\n\n/**\n * @typedef TrapRequest the argument to TrapGuest\n * @property {keyof TrapImpl} trapMethod the TrapImpl method that was called\n * @property {CapTPSlot} slot the target slot\n * @property {Array<any>} trapArgs arguments to the TrapImpl method\n * @property {() => Required<Iterator<void, void, any>>} startTrap start the\n * trap process on the trapHost, and drive the other side.\n */\n\n/**\n * @callback TrapGuest Use out-of-band communications to synchronously return a\n * TrapCompletion value indicating the final results of a Trap call.\n *\n * @param {TrapRequest} req\n * @returns {TrapCompletion}\n */\n\n/**\n * @callback TrapHost start the process of transferring the Trap request's\n * results\n * @param {TrapCompletion} completion\n * @returns {AsyncIterator<void, void, any> | undefined} If an AsyncIterator is\n * returned, it will satisfy a future guest IterationObserver.\n */\n\n/** @typedef {import('./ts-types.js').Trap} Trap */\n\n/**\n * @template T\n * @typedef {import('./ts-types').TrapHandler<T>} TrapHandler\n */","map":{"version":3,"names":[],"sources":["/Users/carlostrigoseguin/Documents/KRYHA/agoric/character-builder-repo/ui/node_modules/@endo/captp/src/types.js"],"sourcesContent":["// @ts-check\n\n/** @typedef {string} CapTPSlot */\n\n/**\n * @typedef {Object} TrapImpl\n * @property {(target: any, args: Array<any>) => any} applyFunction function\n * application\n * @property {(\n *   target: any,\n *   method: string | symbol | number,\n *   args: Array<any>\n * ) => any} applyMethod method invocation, which is an atomic lookup of method\n * and apply\n * @property {(target: any, prop: string | symbol | number) => any} get property\n * lookup\n */\n\n/**\n * @typedef {[boolean, import('@endo/marshal').CapData<CapTPSlot>]} TrapCompletion The head of the pair\n * is the `isRejected` value indicating whether the sync call was an exception,\n * and tail of the pair is the serialized fulfillment value or rejection reason.\n * (The fulfillment value is a non-thenable.  The rejection reason is normally\n * an error.)\n */\n\n/**\n * @typedef TrapRequest the argument to TrapGuest\n * @property {keyof TrapImpl} trapMethod the TrapImpl method that was called\n * @property {CapTPSlot} slot the target slot\n * @property {Array<any>} trapArgs arguments to the TrapImpl method\n * @property {() => Required<Iterator<void, void, any>>} startTrap start the\n * trap process on the trapHost, and drive the other side.\n */\n\n/**\n * @callback TrapGuest Use out-of-band communications to synchronously return a\n * TrapCompletion value indicating the final results of a Trap call.\n *\n * @param {TrapRequest} req\n * @returns {TrapCompletion}\n */\n\n/**\n * @callback TrapHost start the process of transferring the Trap request's\n * results\n * @param {TrapCompletion} completion\n * @returns {AsyncIterator<void, void, any> | undefined} If an AsyncIterator is\n * returned, it will satisfy a future guest IterationObserver.\n */\n\n/** @typedef {import('./ts-types.js').Trap} Trap */\n\n/**\n * @template T\n * @typedef {import('./ts-types').TrapHandler<T>} TrapHandler\n */\n"],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script"}