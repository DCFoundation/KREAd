{"ast":null,"code":"// @ts-check\n\n/**\n * @callback BaseAssert\n * The `assert` function itself.\n *\n * @param {*} flag The truthy/falsy value\n * @param {Details=} optDetails The details to throw\n * @param {ErrorConstructor=} ErrorConstructor An optional alternate error\n * constructor to use.\n * @returns {asserts flag}\n */\n\n/**\n * @typedef {Object} AssertMakeErrorOptions\n * @property {string=} errorName\n */\n\n/**\n * @callback AssertMakeError\n *\n * The `assert.error` method, recording details for the console.\n *\n * The optional `optDetails` can be a string.\n * @param {Details=} optDetails The details of what was asserted\n * @param {ErrorConstructor=} ErrorConstructor An optional alternate error\n * constructor to use.\n * @param {AssertMakeErrorOptions=} options\n * @returns {Error}\n */\n\n/**\n * @callback AssertFail\n *\n * The `assert.fail` method.\n *\n * Fail an assertion, recording details to the console and\n * raising an exception with just type information.\n *\n * The optional `optDetails` can be a string for backwards compatibility\n * with the nodejs assertion library.\n * @param {Details=} optDetails The details of what was asserted\n * @param {ErrorConstructor=} ErrorConstructor An optional alternate error\n * constructor to use.\n * @returns {never}\n */\n\n/**\n * @callback AssertEqual\n * The `assert.equal` method\n *\n * Assert that two values must be `Object.is`.\n * @param {*} actual The value we received\n * @param {*} expected What we wanted\n * @param {Details=} optDetails The details to throw\n * @param {ErrorConstructor=} ErrorConstructor An optional alternate error\n * constructor to use.\n * @returns {void}\n */\n// Type all the overloads of the assertTypeof function.\n// There may eventually be a better way to do this, but they break with\n// Typescript 4.0.\n\n/**\n * @callback AssertTypeofBigint\n * @param {any} specimen\n * @param {'bigint'} typename\n * @param {Details=} optDetails\n * @returns {asserts specimen is bigint}\n *\n * @callback AssertTypeofBoolean\n * @param {any} specimen\n * @param {'boolean'} typename\n * @param {Details=} optDetails\n * @returns {asserts specimen is boolean}\n *\n * @callback AssertTypeofFunction\n * @param {any} specimen\n * @param {'function'} typename\n * @param {Details=} optDetails\n * @returns {asserts specimen is Function}\n *\n * @callback AssertTypeofNumber\n * @param {any} specimen\n * @param {'number'} typename\n * @param {Details=} optDetails\n * @returns {asserts specimen is number}\n *\n * @callback AssertTypeofObject\n * @param {any} specimen\n * @param {'object'} typename\n * @param {Details=} optDetails\n * @returns {asserts specimen is Record<any, any> | null}\n *\n * @callback AssertTypeofString\n * @param {any} specimen\n * @param {'string'} typename\n * @param {Details=} optDetails\n * @returns {asserts specimen is string}\n *\n * @callback AssertTypeofSymbol\n * @param {any} specimen\n * @param {'symbol'} typename\n * @param {Details=} optDetails\n * @returns {asserts specimen is symbol}\n *\n * @callback AssertTypeofUndefined\n * @param {any} specimen\n * @param {'undefined'} typename\n * @param {Details=} optDetails\n * @returns {asserts specimen is undefined}\n */\n\n/**\n * The `assert.typeof` method\n *\n * @typedef {AssertTypeofBigint & AssertTypeofBoolean & AssertTypeofFunction & AssertTypeofNumber & AssertTypeofObject & AssertTypeofString & AssertTypeofSymbol & AssertTypeofUndefined} AssertTypeof\n */\n\n/**\n * @callback AssertString\n * The `assert.string` method.\n *\n * `assert.string(v)` is equivalent to `assert.typeof(v, 'string')`. We\n * special case this one because it is the most frequently used.\n *\n * Assert an expected typeof result.\n * @param {any} specimen The value to get the typeof\n * @param {Details=} optDetails The details to throw\n */\n\n/**\n * @callback AssertNote\n * The `assert.note` method.\n *\n * Annotate this error with these details, potentially to be used by an\n * augmented console, like the causal console of `console.js`, to\n * provide extra information associated with logged errors.\n *\n * @param {Error} error\n * @param {Details} detailsNote\n * @returns {void}\n */\n// /////////////////////////////////////////////////////////////////////////////\n\n/**\n * @typedef {{}} DetailsToken\n * A call to the `details` template literal makes and returns a fresh details\n * token, which is a frozen empty object associated with the arguments of that\n * `details` template literal expression.\n */\n\n/**\n * @typedef {string | DetailsToken} Details\n * Either a plain string, or made by the `details` template literal tag.\n */\n\n/**\n * @typedef {Object} StringablePayload\n * Holds the payload passed to quote so that its printed form is visible.\n * @property {() => string} toString How to print the payload\n */\n\n/**\n * To \"declassify\" and quote a substitution value used in a\n * details`...` template literal, enclose that substitution expression\n * in a call to `quote`. This states that the argument should appear quoted\n * (as if with `JSON.stringify`), in the error message of the thrown error. The\n * payload itself is still passed unquoted to the console as it would be\n * without `quote`.\n *\n * Starting from the example in the `details` comment, say instead that the\n * color the sky is supposed to be is also computed. Say that we still don't\n * want to reveal the sky's actual color, but we do want the thrown error's\n * message to reveal what color the sky was supposed to be:\n * ```js\n * assert.equal(\n *   sky.color,\n *   color,\n *   details`${sky.color} should be ${quote(color)}`,\n * );\n * ```\n *\n * // TODO Update SES-shim to new convention, where `details` is\n * // renamed to `X` rather than `d`.\n * The normal convention is to locally rename `quote` to `q` and\n * `details` to `d`\n * ```js\n * const { details: d, quote: q } = assert;\n * ```\n * so the above example would then be\n * ```js\n * assert.equal(\n *   sky.color,\n *   color,\n *   d`${sky.color} should be ${q(color)}`,\n * );\n * ```\n *\n * @callback AssertQuote\n * @param {*} payload What to declassify\n * @param {(string|number)=} spaces\n * @returns {StringablePayload} The declassified payload\n */\n\n/**\n * @callback Raise\n *\n * To make an `assert` which terminates some larger unit of computation\n * like a transaction, vat, or process, call `makeAssert` with a `Raise`\n * callback, where that callback actually performs that larger termination.\n * If possible, the callback should also report its `reason` parameter as\n * the alleged reason for the termination.\n *\n * @param {Error} reason\n */\n\n/**\n * @callback MakeAssert\n *\n * Makes and returns an `assert` function object that shares the bookkeeping\n * state defined by this module with other `assert` function objects made by\n * `makeAssert`. This state is per-module-instance and is exposed by the\n * `loggedErrorHandler` above. We refer to `assert` as a \"function object\"\n * because it can be called directly as a function, but also has methods that\n * can be called.\n *\n * If `optRaise` is provided, the returned `assert` function object will call\n * `optRaise(reason)` before throwing the error. This enables `optRaise` to\n * engage in even more violent termination behavior, like terminating the vat,\n * that prevents execution from reaching the following throw. However, if\n * `optRaise` returns normally, which would be unusual, the throw following\n * `optRaise(reason)` would still happen.\n *\n * @param {Raise=} optRaise\n * @param {boolean=} unredacted\n * @returns {Assert}\n */\n\n/**\n * @typedef {(template: TemplateStringsArray | string[], ...args: any) => DetailsToken} DetailsTag\n *\n * Use the `details` function as a template literal tag to create\n * informative error messages. The assertion functions take such messages\n * as optional arguments:\n * ```js\n * assert(sky.isBlue(), details`${sky.color} should be \"blue\"`);\n * ```\n * The details template tag returns a `DetailsToken` object that can print\n * itself with the formatted message in two ways.\n * It will report the real details to\n * the console but include only the typeof information in the thrown error\n * to prevent revealing secrets up the exceptional path. In the example\n * above, the thrown error may reveal only that `sky.color` is a string,\n * whereas the same diagnostic printed to the console reveals that the\n * sky was green.\n *\n * The `raw` member of a `template` is ignored, so a simple\n * `string[]` can also be used as a template.\n */\n\n/**\n * assert that expr is truthy, with an optional details to describe\n * the assertion. It is a tagged template literal like\n * ```js\n * assert(expr, details`....`);`\n * ```\n *\n * The literal portions of the template are assumed non-sensitive, as\n * are the `typeof` types of the substitution values. These are\n * assembled into the thrown error message. The actual contents of the\n * substitution values are assumed sensitive, to be revealed to\n * the console only. We assume only the virtual platform's owner can read\n * what is written to the console, where the owner is in a privileged\n * position over computation running on that platform.\n *\n * The optional `optDetails` can be a string for backwards compatibility\n * with the nodejs assertion library.\n *\n * @typedef { BaseAssert & {\n *   typeof: AssertTypeof,\n *   error: AssertMakeError,\n *   fail: AssertFail,\n *   equal: AssertEqual,\n *   string: AssertString,\n *   note: AssertNote,\n *   details: DetailsTag,\n *   quote: AssertQuote,\n *   makeAssert: MakeAssert,\n * } } Assert\n */\n// /////////////////////////////////////////////////////////////////////////////\n\n/**\n * @typedef {Object} VirtualConsole\n * @property {Console['debug']} debug\n * @property {Console['log']} log\n * @property {Console['info']} info\n * @property {Console['warn']} warn\n * @property {Console['error']} error\n *\n * @property {Console['trace']} trace\n * @property {Console['dirxml']} dirxml\n * @property {Console['group']} group\n * @property {Console['groupCollapsed']} groupCollapsed\n *\n * @property {Console['assert']} assert\n * @property {Console['timeLog']} timeLog\n *\n * @property {Console['clear']} clear\n * @property {Console['count']} count\n * @property {Console['countReset']} countReset\n * @property {Console['dir']} dir\n * @property {Console['groupEnd']} groupEnd\n *\n * @property {Console['table']} table\n * @property {Console['time']} time\n * @property {Console['timeEnd']} timeEnd\n * @property {Console['timeStamp']} timeStamp\n */\n\n/* This is deliberately *not* JSDoc, it is a regular comment.\n *\n * TODO: We'd like to add the following properties to the above\n * VirtualConsole, but they currently cause conflicts where\n * some Typescript implementations don't have these properties\n * on the Console type.\n *\n * @property {Console['profile']} profile\n * @property {Console['profileEnd']} profileEnd\n */\n\n/**\n * @typedef {'debug' | 'log' | 'info' | 'warn' | 'error'} LogSeverity\n */\n\n/**\n * @typedef ConsoleFilter\n * @property {(severity: LogSeverity) => boolean} canLog\n */\n\n/**\n * @callback FilterConsole\n * @param {VirtualConsole} baseConsole\n * @param {ConsoleFilter} filter\n * @param {string=} topic\n * @returns {VirtualConsole}\n */","map":{"version":3,"names":[],"sources":["/Users/carlostrigoseguin/Documents/KRYHA/agoric/character-builder-repo/ui/node_modules/ses/src/error/types.js"],"sourcesContent":["// @ts-check\n\n/**\n * @callback BaseAssert\n * The `assert` function itself.\n *\n * @param {*} flag The truthy/falsy value\n * @param {Details=} optDetails The details to throw\n * @param {ErrorConstructor=} ErrorConstructor An optional alternate error\n * constructor to use.\n * @returns {asserts flag}\n */\n\n/**\n * @typedef {Object} AssertMakeErrorOptions\n * @property {string=} errorName\n */\n\n/**\n * @callback AssertMakeError\n *\n * The `assert.error` method, recording details for the console.\n *\n * The optional `optDetails` can be a string.\n * @param {Details=} optDetails The details of what was asserted\n * @param {ErrorConstructor=} ErrorConstructor An optional alternate error\n * constructor to use.\n * @param {AssertMakeErrorOptions=} options\n * @returns {Error}\n */\n\n/**\n * @callback AssertFail\n *\n * The `assert.fail` method.\n *\n * Fail an assertion, recording details to the console and\n * raising an exception with just type information.\n *\n * The optional `optDetails` can be a string for backwards compatibility\n * with the nodejs assertion library.\n * @param {Details=} optDetails The details of what was asserted\n * @param {ErrorConstructor=} ErrorConstructor An optional alternate error\n * constructor to use.\n * @returns {never}\n */\n\n/**\n * @callback AssertEqual\n * The `assert.equal` method\n *\n * Assert that two values must be `Object.is`.\n * @param {*} actual The value we received\n * @param {*} expected What we wanted\n * @param {Details=} optDetails The details to throw\n * @param {ErrorConstructor=} ErrorConstructor An optional alternate error\n * constructor to use.\n * @returns {void}\n */\n\n// Type all the overloads of the assertTypeof function.\n// There may eventually be a better way to do this, but they break with\n// Typescript 4.0.\n/**\n * @callback AssertTypeofBigint\n * @param {any} specimen\n * @param {'bigint'} typename\n * @param {Details=} optDetails\n * @returns {asserts specimen is bigint}\n *\n * @callback AssertTypeofBoolean\n * @param {any} specimen\n * @param {'boolean'} typename\n * @param {Details=} optDetails\n * @returns {asserts specimen is boolean}\n *\n * @callback AssertTypeofFunction\n * @param {any} specimen\n * @param {'function'} typename\n * @param {Details=} optDetails\n * @returns {asserts specimen is Function}\n *\n * @callback AssertTypeofNumber\n * @param {any} specimen\n * @param {'number'} typename\n * @param {Details=} optDetails\n * @returns {asserts specimen is number}\n *\n * @callback AssertTypeofObject\n * @param {any} specimen\n * @param {'object'} typename\n * @param {Details=} optDetails\n * @returns {asserts specimen is Record<any, any> | null}\n *\n * @callback AssertTypeofString\n * @param {any} specimen\n * @param {'string'} typename\n * @param {Details=} optDetails\n * @returns {asserts specimen is string}\n *\n * @callback AssertTypeofSymbol\n * @param {any} specimen\n * @param {'symbol'} typename\n * @param {Details=} optDetails\n * @returns {asserts specimen is symbol}\n *\n * @callback AssertTypeofUndefined\n * @param {any} specimen\n * @param {'undefined'} typename\n * @param {Details=} optDetails\n * @returns {asserts specimen is undefined}\n */\n\n/**\n * The `assert.typeof` method\n *\n * @typedef {AssertTypeofBigint & AssertTypeofBoolean & AssertTypeofFunction & AssertTypeofNumber & AssertTypeofObject & AssertTypeofString & AssertTypeofSymbol & AssertTypeofUndefined} AssertTypeof\n */\n\n/**\n * @callback AssertString\n * The `assert.string` method.\n *\n * `assert.string(v)` is equivalent to `assert.typeof(v, 'string')`. We\n * special case this one because it is the most frequently used.\n *\n * Assert an expected typeof result.\n * @param {any} specimen The value to get the typeof\n * @param {Details=} optDetails The details to throw\n */\n\n/**\n * @callback AssertNote\n * The `assert.note` method.\n *\n * Annotate this error with these details, potentially to be used by an\n * augmented console, like the causal console of `console.js`, to\n * provide extra information associated with logged errors.\n *\n * @param {Error} error\n * @param {Details} detailsNote\n * @returns {void}\n */\n\n// /////////////////////////////////////////////////////////////////////////////\n\n/**\n * @typedef {{}} DetailsToken\n * A call to the `details` template literal makes and returns a fresh details\n * token, which is a frozen empty object associated with the arguments of that\n * `details` template literal expression.\n */\n\n/**\n * @typedef {string | DetailsToken} Details\n * Either a plain string, or made by the `details` template literal tag.\n */\n\n/**\n * @typedef {Object} StringablePayload\n * Holds the payload passed to quote so that its printed form is visible.\n * @property {() => string} toString How to print the payload\n */\n\n/**\n * To \"declassify\" and quote a substitution value used in a\n * details`...` template literal, enclose that substitution expression\n * in a call to `quote`. This states that the argument should appear quoted\n * (as if with `JSON.stringify`), in the error message of the thrown error. The\n * payload itself is still passed unquoted to the console as it would be\n * without `quote`.\n *\n * Starting from the example in the `details` comment, say instead that the\n * color the sky is supposed to be is also computed. Say that we still don't\n * want to reveal the sky's actual color, but we do want the thrown error's\n * message to reveal what color the sky was supposed to be:\n * ```js\n * assert.equal(\n *   sky.color,\n *   color,\n *   details`${sky.color} should be ${quote(color)}`,\n * );\n * ```\n *\n * // TODO Update SES-shim to new convention, where `details` is\n * // renamed to `X` rather than `d`.\n * The normal convention is to locally rename `quote` to `q` and\n * `details` to `d`\n * ```js\n * const { details: d, quote: q } = assert;\n * ```\n * so the above example would then be\n * ```js\n * assert.equal(\n *   sky.color,\n *   color,\n *   d`${sky.color} should be ${q(color)}`,\n * );\n * ```\n *\n * @callback AssertQuote\n * @param {*} payload What to declassify\n * @param {(string|number)=} spaces\n * @returns {StringablePayload} The declassified payload\n */\n\n/**\n * @callback Raise\n *\n * To make an `assert` which terminates some larger unit of computation\n * like a transaction, vat, or process, call `makeAssert` with a `Raise`\n * callback, where that callback actually performs that larger termination.\n * If possible, the callback should also report its `reason` parameter as\n * the alleged reason for the termination.\n *\n * @param {Error} reason\n */\n\n/**\n * @callback MakeAssert\n *\n * Makes and returns an `assert` function object that shares the bookkeeping\n * state defined by this module with other `assert` function objects made by\n * `makeAssert`. This state is per-module-instance and is exposed by the\n * `loggedErrorHandler` above. We refer to `assert` as a \"function object\"\n * because it can be called directly as a function, but also has methods that\n * can be called.\n *\n * If `optRaise` is provided, the returned `assert` function object will call\n * `optRaise(reason)` before throwing the error. This enables `optRaise` to\n * engage in even more violent termination behavior, like terminating the vat,\n * that prevents execution from reaching the following throw. However, if\n * `optRaise` returns normally, which would be unusual, the throw following\n * `optRaise(reason)` would still happen.\n *\n * @param {Raise=} optRaise\n * @param {boolean=} unredacted\n * @returns {Assert}\n */\n\n/**\n * @typedef {(template: TemplateStringsArray | string[], ...args: any) => DetailsToken} DetailsTag\n *\n * Use the `details` function as a template literal tag to create\n * informative error messages. The assertion functions take such messages\n * as optional arguments:\n * ```js\n * assert(sky.isBlue(), details`${sky.color} should be \"blue\"`);\n * ```\n * The details template tag returns a `DetailsToken` object that can print\n * itself with the formatted message in two ways.\n * It will report the real details to\n * the console but include only the typeof information in the thrown error\n * to prevent revealing secrets up the exceptional path. In the example\n * above, the thrown error may reveal only that `sky.color` is a string,\n * whereas the same diagnostic printed to the console reveals that the\n * sky was green.\n *\n * The `raw` member of a `template` is ignored, so a simple\n * `string[]` can also be used as a template.\n */\n\n/**\n * assert that expr is truthy, with an optional details to describe\n * the assertion. It is a tagged template literal like\n * ```js\n * assert(expr, details`....`);`\n * ```\n *\n * The literal portions of the template are assumed non-sensitive, as\n * are the `typeof` types of the substitution values. These are\n * assembled into the thrown error message. The actual contents of the\n * substitution values are assumed sensitive, to be revealed to\n * the console only. We assume only the virtual platform's owner can read\n * what is written to the console, where the owner is in a privileged\n * position over computation running on that platform.\n *\n * The optional `optDetails` can be a string for backwards compatibility\n * with the nodejs assertion library.\n *\n * @typedef { BaseAssert & {\n *   typeof: AssertTypeof,\n *   error: AssertMakeError,\n *   fail: AssertFail,\n *   equal: AssertEqual,\n *   string: AssertString,\n *   note: AssertNote,\n *   details: DetailsTag,\n *   quote: AssertQuote,\n *   makeAssert: MakeAssert,\n * } } Assert\n */\n\n// /////////////////////////////////////////////////////////////////////////////\n\n/**\n * @typedef {Object} VirtualConsole\n * @property {Console['debug']} debug\n * @property {Console['log']} log\n * @property {Console['info']} info\n * @property {Console['warn']} warn\n * @property {Console['error']} error\n *\n * @property {Console['trace']} trace\n * @property {Console['dirxml']} dirxml\n * @property {Console['group']} group\n * @property {Console['groupCollapsed']} groupCollapsed\n *\n * @property {Console['assert']} assert\n * @property {Console['timeLog']} timeLog\n *\n * @property {Console['clear']} clear\n * @property {Console['count']} count\n * @property {Console['countReset']} countReset\n * @property {Console['dir']} dir\n * @property {Console['groupEnd']} groupEnd\n *\n * @property {Console['table']} table\n * @property {Console['time']} time\n * @property {Console['timeEnd']} timeEnd\n * @property {Console['timeStamp']} timeStamp\n */\n\n/* This is deliberately *not* JSDoc, it is a regular comment.\n *\n * TODO: We'd like to add the following properties to the above\n * VirtualConsole, but they currently cause conflicts where\n * some Typescript implementations don't have these properties\n * on the Console type.\n *\n * @property {Console['profile']} profile\n * @property {Console['profileEnd']} profileEnd\n */\n\n/**\n * @typedef {'debug' | 'log' | 'info' | 'warn' | 'error'} LogSeverity\n */\n\n/**\n * @typedef ConsoleFilter\n * @property {(severity: LogSeverity) => boolean} canLog\n */\n\n/**\n * @callback FilterConsole\n * @param {VirtualConsole} baseConsole\n * @param {ConsoleFilter} filter\n * @param {string=} topic\n * @returns {VirtualConsole}\n */\n"],"mappings},"metadata":{},"sourceType":"script"}