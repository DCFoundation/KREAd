{"ast":null,"code":"var _jsxFileName = \"/Users/carlostrigoseguin/Documents/KRYHA/agoric/character-builder-repo/ui/src/context/service.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\n// import { assert } from '@agoric/assert';\n// import '@endo/init';\nimport React, { createContext, useReducer, useContext, useEffect, useRef } from \"react\";\nimport { Far } from '@endo/marshal';\nimport { makeCapTP, E } from '@endo/captp';\nimport { makeAsyncIterableFromNotifier as iterateNotifier } from '@agoric/notifier';\nimport dappConstants from \"../service/conf/defaults\";\nimport { activateWebSocket, deactivateWebSocket, getActiveSocket } from '../service/utils/fetch-websocket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  INSTANCE_BOARD_ID,\n  INSTALLATION_BOARD_ID,\n  issuerBoardIds: {\n    Character: CHARACTER_ISSUER_BOARD_ID\n  },\n  brandBoardIds: {\n    Money: MONEY_BRAND_BOARD_ID,\n    Character: CHARACTER_BRAND_BOARD_ID\n  }\n} = dappConstants;\nconst initialState = {\n  walletConnected: false,\n  dappApproved: false,\n  showApproveDappModal: false,\n  tokenPurses: [],\n  characterPurse: [],\n  agoric: {\n    zoe: undefined,\n    board: undefined,\n    instance: undefined,\n    publicFacet: undefined\n  },\n  isLoading: false\n};\n;\n;\n;\nconst Context = /*#__PURE__*/createContext(undefined);\nconst DispatchContext = /*#__PURE__*/createContext(undefined);\n\nconst Reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_DAPP_APPROVED\":\n      return { ...state,\n        dappApproved: action.payload\n      };\n\n    case \"SET_SHOW_APPROVE_DAPP_MODAL\":\n      return { ...state,\n        showApproveDappModal: action.payload\n      };\n\n    case \"SET_WALLET_CONNECTED\":\n      return { ...state,\n        walletConnected: action.payload\n      };\n\n    case \"SET_TOKEN_PURSES\":\n      return { ...state,\n        tokenPurses: action.payload\n      };\n\n    case \"SET_CHARACTER_PURSES\":\n      return { ...state,\n        characterPurse: action.payload\n      };\n\n    case \"SET_AGORIC\":\n      return { ...state,\n        agoric: action.payload\n      };\n\n    case \"SET_LOADING\":\n      return { ...state,\n        isLoading: action.payload\n      };\n\n    case \"RESET\":\n      return initialState;\n\n    default:\n      throw new Error(`Only defined action types can be handled;`);\n  }\n};\n\n_c = Reducer;\nexport const ServiceStateProvider = props => {\n  _s();\n\n  const [state, dispatch] = useReducer(Reducer, initialState);\n  const walletPRef = useRef(undefined);\n  const publicFacetRef = useRef(undefined);\n  useEffect(() => {\n    // Receive callbacks from the wallet connection.\n    const otherSide = Far('otherSide', {\n      needDappApproval(_dappOrigin, _suggestedDappPetname) {\n        dispatch({\n          type: \"SET_DAPP_APPROVED\",\n          payload: false\n        });\n        dispatch({\n          type: \"SET_SHOW_APPROVE_DAPP_MODAL\",\n          payload: true\n        });\n      },\n\n      dappApproved(_dappOrigin) {\n        dispatch({\n          type: \"SET_DAPP_APPROVED\",\n          payload: true\n        });\n      }\n\n    });\n    let walletAbort;\n    let walletDispatch;\n\n    const onConnect = async () => {\n      console.info(\"Connecting to wallet...\");\n      dispatch({\n        type: \"SET_WALLET_CONNECTED\",\n        payload: true\n      });\n      const socket = getActiveSocket();\n      const {\n        abort: ctpAbort,\n        dispatch: ctpDispatch,\n        getBootstrap\n      } = makeCapTP('Card Store', obj => socket.send(JSON.stringify(obj)), otherSide);\n      walletAbort = ctpAbort;\n      walletDispatch = ctpDispatch;\n      const walletP = getBootstrap();\n      walletPRef.current = walletP;\n\n      const processPurses = purses => {\n        const newTokenPurses = purses.filter(_ref => {\n          let {\n            brandBoardId\n          } = _ref;\n          return brandBoardId === MONEY_BRAND_BOARD_ID;\n        });\n        const newCharacterPurses = purses.find(_ref2 => {\n          let {\n            brandBoardId\n          } = _ref2;\n          return brandBoardId === CHARACTER_BRAND_BOARD_ID;\n        });\n        dispatch({\n          type: \"SET_TOKEN_PURSES\",\n          payload: newTokenPurses\n        });\n        dispatch({\n          type: \"SET_CHARACTER_PURSES\",\n          payload: newCharacterPurses\n        });\n        console.log(\"Token Purse Info: \", newTokenPurses[0].displayInfo);\n        console.log(\"Token Purse Petname: \", newTokenPurses[0].brandPetname);\n        console.log(\"Character Purse Info: \", newCharacterPurses[0].displayInfo);\n        console.log(\"Character Purse Petname: \", newCharacterPurses[0].brandPetname);\n      };\n\n      async function watchPurses() {\n        const pn = E(walletP).getPursesNotifier();\n\n        for await (const purses of iterateNotifier(pn)) {\n          // dispatch(setPurses(purses));\n          processPurses(purses);\n        }\n      }\n\n      watchPurses().catch(err => console.error('got watchPurses err', err));\n      await Promise.all([E(walletP).suggestInstallation('Installation', INSTALLATION_BOARD_ID), E(walletP).suggestInstance('Instance', INSTANCE_BOARD_ID), E(walletP).suggestIssuer('Character', CHARACTER_ISSUER_BOARD_ID)]);\n      const zoe = E(walletP).getZoe();\n      const board = E(walletP).getBoard();\n      const instance = await E(board).getValue(INSTANCE_BOARD_ID);\n      const publicFacet = E(zoe).getPublicFacet(instance);\n      publicFacetRef.current = publicFacet;\n      dispatch({\n        type: \"SET_AGORIC\",\n        payload: {\n          zoe,\n          board,\n          instance,\n          publicFacet\n        }\n      }); // TODO: fetch available characters\n      // const availableItemsNotifier = E(\n      //   publicFacetRef.current,\n      // ).getAvailableItemsNotifier();\n      // for await (const cardsAvailableAmount of iterateNotifier(\n      //   availableItemsNotifier,\n      // )) {\n      //   setAvailableCards(cardsAvailableAmount.value);\n      // }\n    };\n\n    const onDisconnect = () => {\n      dispatch({\n        type: \"SET_WALLET_CONNECTED\",\n        payload: true\n      });\n      walletAbort && walletAbort();\n    };\n\n    const onMessage = data => {\n      const obj = JSON.parse(data);\n      walletDispatch && walletDispatch(obj);\n    };\n\n    activateWebSocket({\n      onConnect,\n      onDisconnect,\n      onMessage\n    });\n    return deactivateWebSocket;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(DispatchContext.Provider, {\n      value: dispatch,\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ServiceStateProvider, \"Zbg4/4gWFTKKib76U856XwAwnbs=\");\n\n_c2 = ServiceStateProvider;\nexport const useServiceState = () => {\n  _s2();\n\n  const state = useContext(Context);\n\n  if (state === undefined) {\n    throw new Error(\"useServiceState can only be called inside a ServiceProvider.\");\n  }\n\n  return state;\n};\n\n_s2(useServiceState, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport const useServiceStateDispatch = () => {\n  _s3();\n\n  const dispatch = useContext(DispatchContext);\n\n  if (dispatch === undefined) {\n    throw new Error(\"useServiceDispatch can only be called inside a ServiceProvider.\");\n  }\n\n  return dispatch;\n};\n\n_s3(useServiceStateDispatch, \"kCU+r/6VuXUfg74P0SIOBSNFld8=\");\n\nexport const useServiceContext = () => {\n  _s4();\n\n  return [useServiceState(), useServiceStateDispatch()];\n};\n\n_s4(useServiceContext, \"tgV6vssei5/rtAlPOgbOucMTsNg=\", false, function () {\n  return [useServiceState, useServiceStateDispatch];\n});\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Reducer\");\n$RefreshReg$(_c2, \"ServiceStateProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useContext","useEffect","useRef","Far","makeCapTP","E","makeAsyncIterableFromNotifier","iterateNotifier","dappConstants","activateWebSocket","deactivateWebSocket","getActiveSocket","INSTANCE_BOARD_ID","INSTALLATION_BOARD_ID","issuerBoardIds","Character","CHARACTER_ISSUER_BOARD_ID","brandBoardIds","Money","MONEY_BRAND_BOARD_ID","CHARACTER_BRAND_BOARD_ID","initialState","walletConnected","dappApproved","showApproveDappModal","tokenPurses","characterPurse","agoric","zoe","undefined","board","instance","publicFacet","isLoading","Context","DispatchContext","Reducer","state","action","type","payload","Error","ServiceStateProvider","props","dispatch","walletPRef","publicFacetRef","otherSide","needDappApproval","_dappOrigin","_suggestedDappPetname","walletAbort","walletDispatch","onConnect","console","info","socket","abort","ctpAbort","ctpDispatch","getBootstrap","obj","send","JSON","stringify","walletP","current","processPurses","purses","newTokenPurses","filter","brandBoardId","newCharacterPurses","find","log","displayInfo","brandPetname","watchPurses","pn","getPursesNotifier","catch","err","error","Promise","all","suggestInstallation","suggestInstance","suggestIssuer","getZoe","getBoard","getValue","getPublicFacet","onDisconnect","onMessage","data","parse","children","useServiceState","useServiceStateDispatch","useServiceContext"],"sources":["/Users/carlostrigoseguin/Documents/KRYHA/agoric/character-builder-repo/ui/src/context/service.tsx"],"sourcesContent":["// import { assert } from '@agoric/assert';\n// import '@endo/init';\nimport React, { createContext, useReducer, useContext, useEffect, useRef } from \"react\";\nimport { Far } from '@endo/marshal';\nimport { makeCapTP, E } from '@endo/captp';\nimport { makeAsyncIterableFromNotifier as iterateNotifier } from '@agoric/notifier';\nimport dappConstants from \"../service/conf/defaults\";\n\nimport {\n  activateWebSocket,\n  deactivateWebSocket,\n  getActiveSocket,\n} from '../service/utils/fetch-websocket';\n\nconst {\n  INSTANCE_BOARD_ID,\n  INSTALLATION_BOARD_ID,\n  issuerBoardIds: { Character: CHARACTER_ISSUER_BOARD_ID },\n  brandBoardIds: { Money: MONEY_BRAND_BOARD_ID, Character: CHARACTER_BRAND_BOARD_ID },\n} = dappConstants;\n\ntype Agoric = {\n  zoe: any;\n  board: any;\n  instance: any;\n  publicFacet: any;\n};\n\nexport type ServiceState = {\n  walletConnected: boolean;\n  dappApproved: boolean;\n  showApproveDappModal: boolean;\n  tokenPurses: any[];\n  characterPurse: any[];\n  agoric: Agoric;\n  isLoading: boolean;\n};\n\nconst initialState: ServiceState = {\n  walletConnected: false,\n  dappApproved: false,\n  showApproveDappModal: false,\n  tokenPurses: [],\n  characterPurse: [],\n  agoric: {\n    zoe: undefined,\n    board: undefined,\n    instance: undefined,\n    publicFacet: undefined\n  },\n  isLoading: false,\n}\n\nexport interface SetDappApproved {\n  type: \"SET_DAPP_APPROVED\";\n  payload: boolean;\n};\n\nexport interface SetWalletConnected {\n  type: \"SET_WALLET_CONNECTED\";\n  payload: boolean;\n};\n\nexport interface SetShowApproveDappModal {\n  type: \"SET_SHOW_APPROVE_DAPP_MODAL\";\n  payload: boolean;\n};\n\nexport interface SetTokenPurses {\n  type: \"SET_TOKEN_PURSES\";\n  payload: any[];\n}\n\nexport interface SetCharacterPurses {\n  type: \"SET_CHARACTER_PURSES\";\n  payload: any[];\n}\n\nexport interface SetAgoric {\n  type: \"SET_AGORIC\";\n  payload: Agoric;\n}\n\nexport interface SetLoading {\n  type: \"SET_LOADING\";\n  payload: boolean;\n}\n\nexport interface Reset {\n  type: \"RESET\";\n}\n\nexport type ServiceStateActions =\n  | Reset\n  | SetDappApproved\n  | SetWalletConnected\n  | SetShowApproveDappModal\n  | SetTokenPurses\n  | SetCharacterPurses\n  | SetAgoric\n  | SetLoading;\n\ntype Dispatch = React.Dispatch<ServiceStateActions>;\ntype ProviderProps = Omit<React.ProviderProps<ServiceState>, \"value\">;\n\nconst Context = createContext<ServiceState | undefined>(undefined);\nconst DispatchContext = createContext<Dispatch | undefined>(undefined);\n\nconst Reducer = (state: ServiceState, action: ServiceStateActions): ServiceState => {\n  switch (action.type) {\n    case \"SET_DAPP_APPROVED\":\n      return { ...state, dappApproved: action.payload };\n\n    case \"SET_SHOW_APPROVE_DAPP_MODAL\":\n      return { ...state, showApproveDappModal: action.payload };\n\n    case \"SET_WALLET_CONNECTED\":\n      return { ...state, walletConnected: action.payload };\n\n    case \"SET_TOKEN_PURSES\":\n      return { ...state, tokenPurses: action.payload };\n    \n    case \"SET_CHARACTER_PURSES\":\n      return { ...state, characterPurse: action.payload };\n    \n    case \"SET_AGORIC\":\n      return { ...state, agoric: action.payload };\n      \n    case \"SET_LOADING\":\n      return { ...state, isLoading: action.payload };\n    \n    case \"RESET\":\n      return initialState;\n\n    default:\n      throw new Error(`Only defined action types can be handled;`);\n  }\n};\n\nexport const ServiceStateProvider = (props: ProviderProps): React.ReactElement => {\n  const [state, dispatch] = useReducer(Reducer, initialState);\n  const walletPRef = useRef(undefined);\n  const publicFacetRef = useRef(undefined);\n  \n  useEffect(() => {\n    // Receive callbacks from the wallet connection.\n    const otherSide = Far('otherSide', {\n      needDappApproval(_dappOrigin: any, _suggestedDappPetname: any) {\n        dispatch({ type: \"SET_DAPP_APPROVED\", payload: false });\n        dispatch({ type: \"SET_SHOW_APPROVE_DAPP_MODAL\", payload: true });\n      },\n      dappApproved(_dappOrigin: any) {\n        dispatch({ type: \"SET_DAPP_APPROVED\", payload: true });\n      },\n    });\n\n    let walletAbort: () => any;\n    let walletDispatch: (arg0: any) => any;\n\n    const onConnect = async () => {\n      console.info(\"Connecting to wallet...\");\n\n      dispatch({ type: \"SET_WALLET_CONNECTED\", payload: true });\n      const socket = getActiveSocket();\n      const {\n        abort: ctpAbort,\n        dispatch: ctpDispatch,\n        getBootstrap,\n      } = makeCapTP(\n        'Card Store',\n        (obj: any) => socket.send(JSON.stringify(obj)),\n        otherSide,\n      );\n      walletAbort = ctpAbort;\n      walletDispatch = ctpDispatch;\n      const walletP = getBootstrap();\n      walletPRef.current = walletP;\n\n      const processPurses = (purses: any[]) => {\n        const newTokenPurses = purses.filter(\n          ({ brandBoardId }) => brandBoardId === MONEY_BRAND_BOARD_ID,\n        );\n        const newCharacterPurses = purses.find(\n          ({ brandBoardId }) => brandBoardId === CHARACTER_BRAND_BOARD_ID,\n        );\n\n        dispatch({ type: \"SET_TOKEN_PURSES\", payload: newTokenPurses });\n        dispatch({ type: \"SET_CHARACTER_PURSES\", payload: newCharacterPurses });\n\n        console.log(\"Token Purse Info: \", newTokenPurses[0].displayInfo);\n        console.log(\"Token Purse Petname: \", newTokenPurses[0].brandPetname);\n        console.log(\"Character Purse Info: \", newCharacterPurses[0].displayInfo);\n        console.log(\"Character Purse Petname: \", newCharacterPurses[0].brandPetname);\n      };\n\n      async function watchPurses() {\n        const pn = E(walletP).getPursesNotifier();\n        for await (const purses of iterateNotifier(pn)) {\n          // dispatch(setPurses(purses));\n          processPurses(purses);\n        }\n      }\n      watchPurses().catch((err) => console.error('got watchPurses err', err));\n\n      await Promise.all([\n        E(walletP).suggestInstallation('Installation', INSTALLATION_BOARD_ID),\n        E(walletP).suggestInstance('Instance', INSTANCE_BOARD_ID),\n        E(walletP).suggestIssuer('Character', CHARACTER_ISSUER_BOARD_ID),\n      ]);\n\n      const zoe = E(walletP).getZoe();\n      const board = E(walletP).getBoard();\n      const instance = await E(board).getValue(INSTANCE_BOARD_ID);\n      const publicFacet = E(zoe).getPublicFacet(instance);\n      publicFacetRef.current = publicFacet;\n\n      dispatch({ type: \"SET_AGORIC\", payload: { zoe, board, instance, publicFacet } });\n      \n      // TODO: fetch available characters\n\n      // const availableItemsNotifier = E(\n      //   publicFacetRef.current,\n      // ).getAvailableItemsNotifier();\n\n      // for await (const cardsAvailableAmount of iterateNotifier(\n      //   availableItemsNotifier,\n      // )) {\n      //   setAvailableCards(cardsAvailableAmount.value);\n      // }\n    };\n\n    const onDisconnect = () => {\n      dispatch({ type: \"SET_WALLET_CONNECTED\", payload: true });\n      walletAbort && walletAbort();\n    };\n\n    const onMessage = (data: string) => {\n      const obj = JSON.parse(data);\n      walletDispatch && walletDispatch(obj);\n    };\n\n    activateWebSocket({\n      onConnect,\n      onDisconnect,\n      onMessage,\n    });\n    return deactivateWebSocket;\n  }, []);\n\n  return (\n    <Context.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>{props.children}</DispatchContext.Provider>\n    </Context.Provider>\n  );\n};\n\nexport const useServiceState = (): ServiceState => {\n  const state = useContext(Context);\n  if (state === undefined) {\n    throw new Error(\"useServiceState can only be called inside a ServiceProvider.\");\n  }\n  return state;\n};\n\nexport const useServiceStateDispatch = (): React.Dispatch<ServiceStateActions> => {\n  const dispatch = useContext(DispatchContext);\n  if (dispatch === undefined) {\n    throw new Error(\"useServiceDispatch can only be called inside a ServiceProvider.\");\n  }\n  return dispatch;\n};\n\nexport const useServiceContext = (): [ServiceState, Dispatch] => [useServiceState(), useServiceStateDispatch()];"],"mappings":"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"},"metadata":{},"sourceType":"module"}