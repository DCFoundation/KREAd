{"ast":null,"code":"/* global globalThis */\n// Copyright (C) 2019 Agoric, under Apache License 2.0\n// @ts-check\n// This module assumes the existence of a non-standard `assert` host object.\n// SES version 0.11.0 introduces this global object and entangles it\n// with the `console` host object in scope when it initializes,\n// allowing errors, particularly assertion errors, to hide their \"details\"\n// from callers that might catch those errors, then reveal them to the\n// underlying console.\n// To the extent that this `console` is considered a resource,\n// this module must be considered a resource module.\n// The assertions re-exported here are defined in\n// https://github.com/endojs/endo/blob/master/packages/ses/src/error/assert.js\n// At https://github.com/Agoric/agoric-sdk/issues/2774\n// is a record of a failed attempt to remove '.types'.\n// To satisfy CI, not only do we need to keep the file,\n// but we need to import it here as well.\nimport './types.js';\nconst {\n  freeze\n} = Object;\n/** @type {Assert} */\n\nconst globalAssert = globalThis.assert;\n\nif (globalAssert === undefined) {\n  throw new Error(`Cannot initialize @agoric/assert, missing globalThis.assert, import 'ses' before '@agoric/assert'`);\n}\n\nconst missing = ['fail', 'equal', 'typeof', 'string', 'note', 'details', 'quote', 'makeAssert'].filter(name => globalAssert[name] === undefined);\n\nif (missing.length > 0) {\n  throw new Error(`Cannot initialize @agoric/assert, missing globalThis.assert methods ${missing.join(', ')}`);\n}\n\nconst {\n  details,\n  quote,\n  makeAssert\n} = globalAssert;\nexport { globalAssert as assert, details, quote };\nexport { quote as q };\nexport { makeAssert };\n/**\n * Prepend the correct indefinite article onto a noun, typically a typeof result\n * e.g., \"an Object\" vs. \"a Number\"\n *\n * @deprecated\n * @param {string} str The noun to prepend\n * @returns {string} The noun prepended with a/an\n */\n\nfunction an(str) {\n  str = `${str}`;\n\n  if (str.length >= 1 && 'aeiouAEIOU'.includes(str[0])) {\n    return `an ${str}`;\n  }\n\n  return `a ${str}`;\n}\n\nfreeze(an);\nexport { an };","map":{"version":3,"names":["freeze","Object","globalAssert","globalThis","assert","undefined","Error","missing","filter","name","length","join","details","quote","makeAssert","q","an","str","includes"],"sources":["/Users/carlostrigoseguin/Documents/KRYHA/agoric/character-builder-repo/ui/node_modules/@agoric/assert/src/assert.js"],"sourcesContent":["/* global globalThis */\n// Copyright (C) 2019 Agoric, under Apache License 2.0\n// @ts-check\n\n// This module assumes the existence of a non-standard `assert` host object.\n// SES version 0.11.0 introduces this global object and entangles it\n// with the `console` host object in scope when it initializes,\n// allowing errors, particularly assertion errors, to hide their \"details\"\n// from callers that might catch those errors, then reveal them to the\n// underlying console.\n// To the extent that this `console` is considered a resource,\n// this module must be considered a resource module.\n\n// The assertions re-exported here are defined in\n// https://github.com/endojs/endo/blob/master/packages/ses/src/error/assert.js\n\n// At https://github.com/Agoric/agoric-sdk/issues/2774\n// is a record of a failed attempt to remove '.types'.\n// To satisfy CI, not only do we need to keep the file,\n// but we need to import it here as well.\nimport './types.js';\n\nconst { freeze } = Object;\n\n/** @type {Assert} */\nconst globalAssert = globalThis.assert;\n\nif (globalAssert === undefined) {\n  throw new Error(\n    `Cannot initialize @agoric/assert, missing globalThis.assert, import 'ses' before '@agoric/assert'`,\n  );\n}\n\nconst missing = [\n  'fail',\n  'equal',\n  'typeof',\n  'string',\n  'note',\n  'details',\n  'quote',\n  'makeAssert',\n].filter(name => globalAssert[name] === undefined);\nif (missing.length > 0) {\n  throw new Error(\n    `Cannot initialize @agoric/assert, missing globalThis.assert methods ${missing.join(\n      ', ',\n    )}`,\n  );\n}\n\nconst { details, quote, makeAssert } = globalAssert;\n\nexport { globalAssert as assert, details, quote };\n\nexport { quote as q };\n\nexport { makeAssert };\n\n/**\n * Prepend the correct indefinite article onto a noun, typically a typeof result\n * e.g., \"an Object\" vs. \"a Number\"\n *\n * @deprecated\n * @param {string} str The noun to prepend\n * @returns {string} The noun prepended with a/an\n */\nfunction an(str) {\n  str = `${str}`;\n  if (str.length >= 1 && 'aeiouAEIOU'.includes(str[0])) {\n    return `an ${str}`;\n  }\n  return `a ${str}`;\n}\nfreeze(an);\nexport { an };\n"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA,OAAO,YAAP;AAEA,MAAM;EAAEA;AAAF,IAAaC,MAAnB;AAEA;;AACA,MAAMC,YAAY,GAAGC,UAAU,CAACC,MAAhC;;AAEA,IAAIF,YAAY,KAAKG,SAArB,EAAgC;EAC9B,MAAM,IAAIC,KAAJ,CACH,mGADG,CAAN;AAGD;;AAED,MAAMC,OAAO,GAAG,CACd,MADc,EAEd,OAFc,EAGd,QAHc,EAId,QAJc,EAKd,MALc,EAMd,SANc,EAOd,OAPc,EAQd,YARc,EASdC,MATc,CASPC,IAAI,IAAIP,YAAY,CAACO,IAAD,CAAZ,KAAuBJ,SATxB,CAAhB;;AAUA,IAAIE,OAAO,CAACG,MAAR,GAAiB,CAArB,EAAwB;EACtB,MAAM,IAAIJ,KAAJ,CACH,uEAAsEC,OAAO,CAACI,IAAR,CACrE,IADqE,CAErE,EAHE,CAAN;AAKD;;AAED,MAAM;EAAEC,OAAF;EAAWC,KAAX;EAAkBC;AAAlB,IAAiCZ,YAAvC;AAEA,SAASA,YAAY,IAAIE,MAAzB,EAAiCQ,OAAjC,EAA0CC,KAA1C;AAEA,SAASA,KAAK,IAAIE,CAAlB;AAEA,SAASD,UAAT;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,EAAT,CAAYC,GAAZ,EAAiB;EACfA,GAAG,GAAI,GAAEA,GAAI,EAAb;;EACA,IAAIA,GAAG,CAACP,MAAJ,IAAc,CAAd,IAAmB,aAAaQ,QAAb,CAAsBD,GAAG,CAAC,CAAD,CAAzB,CAAvB,EAAsD;IACpD,OAAQ,MAAKA,GAAI,EAAjB;EACD;;EACD,OAAQ,KAAIA,GAAI,EAAhB;AACD;;AACDjB,MAAM,CAACgB,EAAD,CAAN;AACA,SAASA,EAAT"},"metadata":{},"sourceType":"module"}