{"ast":null,"code":"// pre.js - set up the default lockdown function\n\n/* global globalThis LOCKDOWN_OPTIONS process */\nimport 'ses';\nimport postLockdown from './post.js'; // Export the type definitions, too.\n\nexport * from 'ses';\nconst rawLockdown = globalThis.lockdown;\n/** @type {typeof rawLockdown} */\n\nexport const lockdown = defaultOptions => {\n  // For testing under Ava, and also sometimes for testing and debugging in\n  // general, when safety is not needed, you perhaps want to use\n  // packages/SwingSet/tools/install-ses-debug.js instead of this one.\n  // If you're using a prepare-test-env-ava.js, it is probably already doing that\n  // for you.\n  // The `@endo/init` package exists so the \"main\" of production code\n  // can start with the following import or its equivalent.\n  // ```js\n  // import '@endo/init';\n  // ```\n  // But production code must also be tested. Normal ocap discipline of passing\n  // explicit arguments into the `lockdown`\n  // call would require an awkward structuring of start modules, since\n  // the `init` module calls `lockdown` during its initialization,\n  // before any explicit code in the start module gets to run. Even if other code\n  // does get to run first, the `lockdown` call in this module happens during\n  // module initialization, before it can legitimately receive parameters by\n  // explicit parameter passing.\n  //\n  // Instead, for now, `init` violates normal ocap discipline by feature\n  // testing global state for a passed \"parameter\". This is something that a\n  // module can but normally should not do, during initialization or otherwise.\n  // Initialization is often awkward.\n  //\n  // The `init` module tests, first,\n  // for a JavaScript global named `LOCKDOWN_OPTIONS`, and second, for an\n  // environment\n  // variable named `LOCKDOWN_OPTIONS`. If either is present, its value should be\n  // a JSON encoding of the options bag to pass to the `lockdown` call. If so,\n  // then `init` calls `lockdown` with those options. If there is no such\n  // feature, `init` calls `lockdown` with appropriate settings for\n  // production use.\n  let optionsString;\n\n  if (typeof LOCKDOWN_OPTIONS === 'string') {\n    optionsString = LOCKDOWN_OPTIONS;\n    console.warn(`'@endo/lockdown' sniffed and found a 'LOCKDOWN_OPTIONS' global variable\\n`);\n  } else if (typeof process === 'object' && typeof process.env.LOCKDOWN_OPTIONS === 'string') {\n    optionsString = process.env.LOCKDOWN_OPTIONS;\n    console.warn(`'@endo/lockdown' sniffed and found a 'LOCKDOWN_OPTIONS' environment variable\\n`);\n  }\n\n  if (typeof optionsString === 'string') {\n    let options;\n\n    try {\n      options = JSON.parse(optionsString);\n    } catch (err) {\n      console.error('Environment variable LOCKDOWN_OPTIONS must be JSON', err);\n      throw err;\n    }\n\n    if (typeof options !== 'object' || Array.isArray(options)) {\n      const err = new TypeError('Environment variable LOCKDOWN_OPTIONS must be a JSON object');\n      console.error('', err, options);\n      throw err;\n    }\n\n    rawLockdown({ ...options,\n      // See comment on domainTaming below.\n      domainTaming: 'unsafe'\n    });\n  } else if (defaultOptions) {\n    rawLockdown({ ...defaultOptions,\n      // See comment on domainTaming below.\n      domainTaming: 'unsafe'\n    });\n  } else {\n    rawLockdown({\n      // The default `{errorTaming: 'safe'}` setting, if possible, redacts the\n      // stack trace info from the error instances, so that it is not available\n      // merely by saying `errorInstance.stack`. However, some tools\n      // will look for the stack there and become much less useful if it is\n      // missing. In production, the settings in this file need to preserve\n      // security, so the 'unsafe' setting below MUST always be commented out\n      // except during private development.\n      //\n      // NOTE TO REVIEWERS: If you see the following line *not* commented out,\n      // this may be a development accident that MUST be fixed before merging.\n      //\n      // errorTaming: 'unsafe',\n      //\n      //\n      // The default `{stackFiltering: 'concise'}` setting usually makes for a\n      // better debugging experience, by severely reducing the noisy distractions\n      // of the normal verbose stack traces. Which is why we comment\n      // out the `'verbose'` setting is commented out below. However, some\n      // tools look for the full filename that it expects in order\n      // to fetch the source text for diagnostics,\n      //\n      // Another reason for not commenting it out: The cause\n      // of the bug may be anywhere, so the `'noise'` thrown out by the default\n      // `'concise'` setting may also contain the signal you need. To see it,\n      // uncomment out the following line. But please do not commit it in that\n      // state.\n      //\n      // NOTE TO REVIEWERS: If you see the following line *not* commented out,\n      // this may be a development accident that MUST be fixed before merging.\n      //\n      // stackFiltering: 'verbose',\n      //\n      //\n      // The default `{overrideTaming: 'moderate'}` setting does not hurt the\n      // debugging experience much. But it will introduce noise into, for example,\n      // the vscode debugger's object inspector. During debug and test, if you can\n      // avoid legacy code that needs the `'moderate'` setting, then the `'min'`\n      // setting reduces debugging noise yet further, by turning fewer inherited\n      // properties into accessors.\n      //\n      // NOTE TO REVIEWERS: If you see the following line *not* commented out,\n      // this may be a development accident that MUST be fixed before merging.\n      //\n      // overrideTaming: 'min',\n      //\n      //\n      // The default `{consoleTaming: 'safe'}` setting usually makes for a\n      // better debugging experience, by wrapping the original `console` with\n      // the SES replacement `console` that provides more information about\n      // errors, expecially those thrown by the `assert` system. However,\n      // in case the SES `console` is getting in the way, we provide the\n      // `'unsafe'` option for leaving the original `console` in place.\n      //\n      // NOTE TO REVIEWERS: If you see the following line *not* commented out,\n      // this may be a development accident that MUST be fixed before merging.\n      //\n      // consoleTaming: 'unsafe',\n      // Domain taming causes lockdown to throw an error if the Node.js domain\n      // module has already been loaded, and causes loading the domain module\n      // to throw an error if it is pulled into the working set later.\n      // This is because domains may add domain properties to promises and other\n      // callbacks and that these domain objects provide a means to escape\n      // containment.\n      // However, our platform still depends on systems like standardthings/esm\n      // which ultimately pull in domains.\n      // For now, we are resigned to leave this hole open, knowing that all\n      // contract code will be run under XS to avoid this vulnerability.\n      domainTaming: 'unsafe'\n    });\n  } // We are now in the \"Start Compartment\". Our global has all the same\n  // powerful things it had before, but the primordials have changed to make\n  // them safe to use in the arguments of API calls we make into more limited\n  // compartments\n  // 'Compartment', 'assert', and 'harden' are now present in our global scope.\n\n\n  postLockdown();\n};\nglobalThis.lockdown = lockdown;","map":{"version":3,"names":["postLockdown","rawLockdown","globalThis","lockdown","defaultOptions","optionsString","LOCKDOWN_OPTIONS","console","warn","process","env","options","JSON","parse","err","error","Array","isArray","TypeError","domainTaming"],"sources":["/Users/carlostrigoseguin/Documents/KRYHA/agoric/character-builder-repo/ui/node_modules/@endo/lockdown/pre.js"],"sourcesContent":["// pre.js - set up the default lockdown function\n/* global globalThis LOCKDOWN_OPTIONS process */\n\nimport 'ses';\nimport postLockdown from './post.js';\n\n// Export the type definitions, too.\nexport * from 'ses';\n\nconst rawLockdown = globalThis.lockdown;\n\n/** @type {typeof rawLockdown} */\nexport const lockdown = defaultOptions => {\n  // For testing under Ava, and also sometimes for testing and debugging in\n  // general, when safety is not needed, you perhaps want to use\n  // packages/SwingSet/tools/install-ses-debug.js instead of this one.\n  // If you're using a prepare-test-env-ava.js, it is probably already doing that\n  // for you.\n\n  // The `@endo/init` package exists so the \"main\" of production code\n  // can start with the following import or its equivalent.\n  // ```js\n  // import '@endo/init';\n  // ```\n  // But production code must also be tested. Normal ocap discipline of passing\n  // explicit arguments into the `lockdown`\n  // call would require an awkward structuring of start modules, since\n  // the `init` module calls `lockdown` during its initialization,\n  // before any explicit code in the start module gets to run. Even if other code\n  // does get to run first, the `lockdown` call in this module happens during\n  // module initialization, before it can legitimately receive parameters by\n  // explicit parameter passing.\n  //\n  // Instead, for now, `init` violates normal ocap discipline by feature\n  // testing global state for a passed \"parameter\". This is something that a\n  // module can but normally should not do, during initialization or otherwise.\n  // Initialization is often awkward.\n  //\n  // The `init` module tests, first,\n  // for a JavaScript global named `LOCKDOWN_OPTIONS`, and second, for an\n  // environment\n  // variable named `LOCKDOWN_OPTIONS`. If either is present, its value should be\n  // a JSON encoding of the options bag to pass to the `lockdown` call. If so,\n  // then `init` calls `lockdown` with those options. If there is no such\n  // feature, `init` calls `lockdown` with appropriate settings for\n  // production use.\n\n  let optionsString;\n  if (typeof LOCKDOWN_OPTIONS === 'string') {\n    optionsString = LOCKDOWN_OPTIONS;\n    console.warn(\n      `'@endo/lockdown' sniffed and found a 'LOCKDOWN_OPTIONS' global variable\\n`,\n    );\n  } else if (\n    typeof process === 'object' &&\n    typeof process.env.LOCKDOWN_OPTIONS === 'string'\n  ) {\n    optionsString = process.env.LOCKDOWN_OPTIONS;\n    console.warn(\n      `'@endo/lockdown' sniffed and found a 'LOCKDOWN_OPTIONS' environment variable\\n`,\n    );\n  }\n\n  if (typeof optionsString === 'string') {\n    let options;\n    try {\n      options = JSON.parse(optionsString);\n    } catch (err) {\n      console.error('Environment variable LOCKDOWN_OPTIONS must be JSON', err);\n      throw err;\n    }\n    if (typeof options !== 'object' || Array.isArray(options)) {\n      const err = new TypeError(\n        'Environment variable LOCKDOWN_OPTIONS must be a JSON object',\n      );\n      console.error('', err, options);\n      throw err;\n    }\n    rawLockdown({\n      ...options,\n      // See comment on domainTaming below.\n      domainTaming: 'unsafe',\n    });\n  } else if (defaultOptions) {\n    rawLockdown({\n      ...defaultOptions,\n      // See comment on domainTaming below.\n      domainTaming: 'unsafe',\n    });\n  } else {\n    rawLockdown({\n      // The default `{errorTaming: 'safe'}` setting, if possible, redacts the\n      // stack trace info from the error instances, so that it is not available\n      // merely by saying `errorInstance.stack`. However, some tools\n      // will look for the stack there and become much less useful if it is\n      // missing. In production, the settings in this file need to preserve\n      // security, so the 'unsafe' setting below MUST always be commented out\n      // except during private development.\n      //\n      // NOTE TO REVIEWERS: If you see the following line *not* commented out,\n      // this may be a development accident that MUST be fixed before merging.\n      //\n      // errorTaming: 'unsafe',\n      //\n      //\n      // The default `{stackFiltering: 'concise'}` setting usually makes for a\n      // better debugging experience, by severely reducing the noisy distractions\n      // of the normal verbose stack traces. Which is why we comment\n      // out the `'verbose'` setting is commented out below. However, some\n      // tools look for the full filename that it expects in order\n      // to fetch the source text for diagnostics,\n      //\n      // Another reason for not commenting it out: The cause\n      // of the bug may be anywhere, so the `'noise'` thrown out by the default\n      // `'concise'` setting may also contain the signal you need. To see it,\n      // uncomment out the following line. But please do not commit it in that\n      // state.\n      //\n      // NOTE TO REVIEWERS: If you see the following line *not* commented out,\n      // this may be a development accident that MUST be fixed before merging.\n      //\n      // stackFiltering: 'verbose',\n      //\n      //\n      // The default `{overrideTaming: 'moderate'}` setting does not hurt the\n      // debugging experience much. But it will introduce noise into, for example,\n      // the vscode debugger's object inspector. During debug and test, if you can\n      // avoid legacy code that needs the `'moderate'` setting, then the `'min'`\n      // setting reduces debugging noise yet further, by turning fewer inherited\n      // properties into accessors.\n      //\n      // NOTE TO REVIEWERS: If you see the following line *not* commented out,\n      // this may be a development accident that MUST be fixed before merging.\n      //\n      // overrideTaming: 'min',\n      //\n      //\n      // The default `{consoleTaming: 'safe'}` setting usually makes for a\n      // better debugging experience, by wrapping the original `console` with\n      // the SES replacement `console` that provides more information about\n      // errors, expecially those thrown by the `assert` system. However,\n      // in case the SES `console` is getting in the way, we provide the\n      // `'unsafe'` option for leaving the original `console` in place.\n      //\n      // NOTE TO REVIEWERS: If you see the following line *not* commented out,\n      // this may be a development accident that MUST be fixed before merging.\n      //\n      // consoleTaming: 'unsafe',\n\n      // Domain taming causes lockdown to throw an error if the Node.js domain\n      // module has already been loaded, and causes loading the domain module\n      // to throw an error if it is pulled into the working set later.\n      // This is because domains may add domain properties to promises and other\n      // callbacks and that these domain objects provide a means to escape\n      // containment.\n      // However, our platform still depends on systems like standardthings/esm\n      // which ultimately pull in domains.\n      // For now, we are resigned to leave this hole open, knowing that all\n      // contract code will be run under XS to avoid this vulnerability.\n      domainTaming: 'unsafe',\n    });\n  }\n\n  // We are now in the \"Start Compartment\". Our global has all the same\n  // powerful things it had before, but the primordials have changed to make\n  // them safe to use in the arguments of API calls we make into more limited\n  // compartments\n\n  // 'Compartment', 'assert', and 'harden' are now present in our global scope.\n  postLockdown();\n};\n\nglobalThis.lockdown = lockdown;\n"],"mappings":"AAAA;;AACA;AAEA,OAAO,KAAP;AACA,OAAOA,YAAP,MAAyB,WAAzB,C,CAEA;;AACA,cAAc,KAAd;AAEA,MAAMC,WAAW,GAAGC,UAAU,CAACC,QAA/B;AAEA;;AACA,OAAO,MAAMA,QAAQ,GAAGC,cAAc,IAAI;EACxC;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA,IAAIC,aAAJ;;EACA,IAAI,OAAOC,gBAAP,KAA4B,QAAhC,EAA0C;IACxCD,aAAa,GAAGC,gBAAhB;IACAC,OAAO,CAACC,IAAR,CACG,2EADH;EAGD,CALD,MAKO,IACL,OAAOC,OAAP,KAAmB,QAAnB,IACA,OAAOA,OAAO,CAACC,GAAR,CAAYJ,gBAAnB,KAAwC,QAFnC,EAGL;IACAD,aAAa,GAAGI,OAAO,CAACC,GAAR,CAAYJ,gBAA5B;IACAC,OAAO,CAACC,IAAR,CACG,gFADH;EAGD;;EAED,IAAI,OAAOH,aAAP,KAAyB,QAA7B,EAAuC;IACrC,IAAIM,OAAJ;;IACA,IAAI;MACFA,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,aAAX,CAAV;IACD,CAFD,CAEE,OAAOS,GAAP,EAAY;MACZP,OAAO,CAACQ,KAAR,CAAc,oDAAd,EAAoED,GAApE;MACA,MAAMA,GAAN;IACD;;IACD,IAAI,OAAOH,OAAP,KAAmB,QAAnB,IAA+BK,KAAK,CAACC,OAAN,CAAcN,OAAd,CAAnC,EAA2D;MACzD,MAAMG,GAAG,GAAG,IAAII,SAAJ,CACV,6DADU,CAAZ;MAGAX,OAAO,CAACQ,KAAR,CAAc,EAAd,EAAkBD,GAAlB,EAAuBH,OAAvB;MACA,MAAMG,GAAN;IACD;;IACDb,WAAW,CAAC,EACV,GAAGU,OADO;MAEV;MACAQ,YAAY,EAAE;IAHJ,CAAD,CAAX;EAKD,CApBD,MAoBO,IAAIf,cAAJ,EAAoB;IACzBH,WAAW,CAAC,EACV,GAAGG,cADO;MAEV;MACAe,YAAY,EAAE;IAHJ,CAAD,CAAX;EAKD,CANM,MAMA;IACLlB,WAAW,CAAC;MACV;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAkB,YAAY,EAAE;IArEJ,CAAD,CAAX;EAuED,CArJuC,CAuJxC;EACA;EACA;EACA;EAEA;;;EACAnB,YAAY;AACb,CA9JM;AAgKPE,UAAU,CAACC,QAAX,GAAsBA,QAAtB"},"metadata":{},"sourceType":"module"}