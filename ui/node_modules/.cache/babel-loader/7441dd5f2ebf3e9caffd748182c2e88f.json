{"ast":null,"code":"// @ts-check\n/// <reference types=\"ses\"/>\nimport { makeMarshal } from './marshal.js';\n/** @typedef {import('./types.js').Passable} Passable */\n\nconst {\n  details: X\n} = assert;\n/** @type {import('./types.js').ConvertValToSlot<any>} */\n\nconst doNotConvertValToSlot = val => assert.fail(X`Marshal's stringify rejects presences and promises ${val}`);\n/** @type {import('./types.js').ConvertSlotToVal<any>} */\n\n\nconst doNotConvertSlotToVal = (slot, _iface) => assert.fail(X`Marshal's parse must not encode any slots ${slot}`);\n\nconst badArrayHandler = harden({\n  get: (_target, name, _receiver) => {\n    if (name === 'length') {\n      return 0;\n    }\n\n    assert.fail(X`Marshal's parse must not encode any slot positions ${name}`);\n  }\n});\nconst badArray = harden(new Proxy(harden([]), badArrayHandler));\nconst {\n  serialize,\n  unserialize\n} = makeMarshal(doNotConvertValToSlot, doNotConvertSlotToVal, {\n  errorTagging: 'off'\n});\n/**\n * @param {Passable} val\n * @returns {string}\n */\n\nconst stringify = val => serialize(val).body;\n\nharden(stringify);\n/**\n * @param {string} str\n * @returns {Passable}\n */\n\nconst parse = str => unserialize(harden({\n  body: str,\n  slots: badArray\n}));\n\nharden(parse);\nexport { stringify, parse };","map":{"version":3,"names":["makeMarshal","details","X","assert","doNotConvertValToSlot","val","fail","doNotConvertSlotToVal","slot","_iface","badArrayHandler","harden","get","_target","name","_receiver","badArray","Proxy","serialize","unserialize","errorTagging","stringify","body","parse","str","slots"],"sources":["/Users/carlostrigoseguin/Documents/KRYHA/agoric/character-builder-repo/ui/node_modules/@endo/marshal/src/marshal-stringify.js"],"sourcesContent":["// @ts-check\n/// <reference types=\"ses\"/>\n\nimport { makeMarshal } from './marshal.js';\n\n/** @typedef {import('./types.js').Passable} Passable */\n\nconst { details: X } = assert;\n\n/** @type {import('./types.js').ConvertValToSlot<any>} */\nconst doNotConvertValToSlot = val =>\n  assert.fail(X`Marshal's stringify rejects presences and promises ${val}`);\n\n/** @type {import('./types.js').ConvertSlotToVal<any>} */\nconst doNotConvertSlotToVal = (slot, _iface) =>\n  assert.fail(X`Marshal's parse must not encode any slots ${slot}`);\n\nconst badArrayHandler = harden({\n  get: (_target, name, _receiver) => {\n    if (name === 'length') {\n      return 0;\n    }\n    assert.fail(X`Marshal's parse must not encode any slot positions ${name}`);\n  },\n});\n\nconst badArray = harden(new Proxy(harden([]), badArrayHandler));\n\nconst { serialize, unserialize } = makeMarshal(\n  doNotConvertValToSlot,\n  doNotConvertSlotToVal,\n  { errorTagging: 'off' },\n);\n\n/**\n * @param {Passable} val\n * @returns {string}\n */\nconst stringify = val => serialize(val).body;\nharden(stringify);\n\n/**\n * @param {string} str\n * @returns {Passable}\n */\nconst parse = str =>\n  unserialize(\n    harden({\n      body: str,\n      slots: badArray,\n    }),\n  );\nharden(parse);\n\nexport { stringify, parse };\n"],"mappings":"AAAA;AACA;AAEA,SAASA,WAAT,QAA4B,cAA5B;AAEA;;AAEA,MAAM;EAAEC,OAAO,EAAEC;AAAX,IAAiBC,MAAvB;AAEA;;AACA,MAAMC,qBAAqB,GAAGC,GAAG,IAC/BF,MAAM,CAACG,IAAP,CAAYJ,CAAE,sDAAqDG,GAAI,EAAvE,CADF;AAGA;;;AACA,MAAME,qBAAqB,GAAG,CAACC,IAAD,EAAOC,MAAP,KAC5BN,MAAM,CAACG,IAAP,CAAYJ,CAAE,6CAA4CM,IAAK,EAA/D,CADF;;AAGA,MAAME,eAAe,GAAGC,MAAM,CAAC;EAC7BC,GAAG,EAAE,CAACC,OAAD,EAAUC,IAAV,EAAgBC,SAAhB,KAA8B;IACjC,IAAID,IAAI,KAAK,QAAb,EAAuB;MACrB,OAAO,CAAP;IACD;;IACDX,MAAM,CAACG,IAAP,CAAYJ,CAAE,sDAAqDY,IAAK,EAAxE;EACD;AAN4B,CAAD,CAA9B;AASA,MAAME,QAAQ,GAAGL,MAAM,CAAC,IAAIM,KAAJ,CAAUN,MAAM,CAAC,EAAD,CAAhB,EAAsBD,eAAtB,CAAD,CAAvB;AAEA,MAAM;EAAEQ,SAAF;EAAaC;AAAb,IAA6BnB,WAAW,CAC5CI,qBAD4C,EAE5CG,qBAF4C,EAG5C;EAAEa,YAAY,EAAE;AAAhB,CAH4C,CAA9C;AAMA;AACA;AACA;AACA;;AACA,MAAMC,SAAS,GAAGhB,GAAG,IAAIa,SAAS,CAACb,GAAD,CAAT,CAAeiB,IAAxC;;AACAX,MAAM,CAACU,SAAD,CAAN;AAEA;AACA;AACA;AACA;;AACA,MAAME,KAAK,GAAGC,GAAG,IACfL,WAAW,CACTR,MAAM,CAAC;EACLW,IAAI,EAAEE,GADD;EAELC,KAAK,EAAET;AAFF,CAAD,CADG,CADb;;AAOAL,MAAM,CAACY,KAAD,CAAN;AAEA,SAASF,SAAT,EAAoBE,KAApB"},"metadata":{},"sourceType":"module"}